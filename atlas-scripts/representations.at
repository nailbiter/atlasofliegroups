<group_operations.at { for is_split and such }

{ some common representations }

{ finite dimensional with highest weight gamma in X^*
  param(last KGB element,lambda=gamma+rho,nu=gamma+rho)
  consequently every simple root is in the tau-invariant,
  and the infinitesimal character is gamma+rho
}

set finite_dimensional (RealForm G,vec gamma) = Param:
  param(KGB(G,KGB_size(G)-1),gamma,gamma+rho(G))

set finite_dimensional_fundamental_weight_coordinates(RealForm G,vec tau)=Param:
let fw=fundamental_weights(G) then
rv=ratvec:null(rank(G)) then
()=for i:#tau do rv+:=tau[i]*fw[i] od  in
assert(is_integer(rv), "weight is not integral");
finite_dimensional(G,ratvec_as_vec(rv))

{ the trivial block }
set trivial_block(RealForm G)=[Param]:block_of(trivial(G))

set large_fundamental_series (RealForm G) = Param:
  if not(is_quasisplit(G)) then error("group is not quasisplit")
  else let v=null(rank(G)) in param(G,0,v,v)
  fi

set large_discrete_series (RealForm G) = Param:
  if not(is_equal_rank(G)) then error("group is not equal rank")
  else large_fundamental_series(G)
  fi

{ spherical principal series of split group; assuming G is split }
set spherical_principal_series (RealForm G, ratvec nu) = Param:
  param(KGB(G,KGB_size(G)-1),null(rank(G)),nu)

set sc_split_only(RealForm G) = RealForm:
  if not is_split(G) then error("Group must be split")
  elif not is_simply_connected(G) then error("Group must be simply connected")
  else G
  fi

set principal_series_by_tau (RealForm G,[int] tau_invariant) = Param:
  let lambda = ratvec: null(rank(sc_split_only(G)))
  then ()=for i in tau_invariant do lambda+:=fundamental_weight(G,i) od
  in param(KGB(G,KGB_size(G)-1),ratvec_as_vec(rho(G)+lambda),rho(G))

set principal_series_by_tau_complement (RealForm G,[int] tau_invariant) = Param:
  let lambda = ratvec: null(rank(sc_split_only(G)))
  then ()=for i in tau_invariant do lambda+:=fundamental_weight(G,i) od
  in param(KGB(G,KGB_size(G)-1),ratvec_as_vec(lambda),rho(G))


set all_principal_series(RealForm G) = [Param]:
  for tau in generate_all_subsets(#semisimple_rank(G))
  do principal_series_by_tau(G,tau) od
