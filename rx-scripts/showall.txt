Overloaded operators and functions:
+: (int,int->int): {+@(int,int)}
+: (rat,rat->rat): {+@(rat,rat)}
+: (ratvec,ratvec->ratvec): {+@(ratvec,ratvec)}
+: (Split,Split->Split): {+@(Split,Split)}
+: (ParamPol,Param->ParamPol): {+@(ParamPol,Param)}
+: (ParamPol,(Split,Param)->ParamPol): {+@(ParamPol,(Split,Param))}
+: (ParamPol,[(Split,Param)]->ParamPol): {+@(ParamPol,[(Split,Param)])}
+: (ParamPol,ParamPol->ParamPol): {+@(ParamPol,ParamPol)}
-: (int,int->int): {-@(int,int)}
-: (int->int): {-@int}
-: (rat,rat->rat): {-@(rat,rat)}
-: (rat->rat): {-@rat}
-: (ratvec,ratvec->ratvec): {-@(ratvec,ratvec)}
-: (Split,Split->Split): {-@(Split,Split)}
-: (Split->Split): {-@Split}
*: (int,int->int): {*@(int,int)}
*: (rat,rat->rat): {*@(rat,rat)}
*: (vec,vec->int): {*@(vec,vec)}
*: (mat,vec->vec): {*@(mat,vec)}
*: (mat,ratvec->ratvec): {*@(mat,ratvec)}
*: (mat,mat->mat): {*@(mat,mat)}
*: (vec,mat->vec): {*@(vec,mat)}
*: (Split,Split->Split): {*@(Split,Split)}
*: (int,ParamPol->ParamPol): {*@(int,ParamPol)}
*: (Split,ParamPol->ParamPol): {*@(Split,ParamPol)}
\: (int,int->int): {\@(int,int)}
%: (int,int->int): {%@(int,int)}
%: (rat->int,int): {%@rat}
%: (ratvec->vec,int): {%@ratvec}
%: (LieType->[LieType]): {%@LieType}
%: (Param->KGBElt,vec,ratvec): {%@Param}
%: (Split->int,int): {%@Split}
\%: (int,int->int,int): {\%@(int,int)}
^: (int,int->int): {^@(int,int)}
^: (rat,int->rat): {^@(rat,int)}
^: (vec->mat): {^@vec}
^: (mat->mat): {^@mat}
/: (int,int->rat): {/@(int,int)}
/: (rat,rat->rat): {/@(rat,rat)}
/: (rat->rat): {/@rat}
/: (vec,int->ratvec): {/@(vec,int)}
=: (int,int->bool): {=@(int,int)}
=: (rat,rat->bool): {=@(rat,rat)}
=: (bool,bool->bool): {=@(bool,bool)}
=: (string,string->bool): {=@(string,string)}
=: (vec,vec->bool): {=@(vec,vec)}
=: (mat,mat->bool): {=@(mat,mat)}
=: (InnerClass,InnerClass->bool): {=@(InnerClass,InnerClass)}
=: (KGBElt,KGBElt->bool): {=@(KGBElt,KGBElt)}
=: (Param,Param->bool): {=@(Param,Param)}
!=: (int,int->bool): {!=@(int,int)}
!=: (rat,rat->bool): {!=@(rat,rat)}
!=: (bool,bool->bool): {!=@(bool,bool)}
!=: (vec,vec->bool): {!=@(vec,vec)}
!=: (mat,mat->bool): {!=@(mat,mat)}
<: (int,int->bool): {<@(int,int)}
<: (rat,rat->bool): {<@(rat,rat)}
<=: (int,int->bool): {<=@(int,int)}
<=: (rat,rat->bool): {<=@(rat,rat)}
<=: (string,string->bool): {<=@(string,string)}
>: (int,int->bool): {>@(int,int)}
>: (rat,rat->bool): {>@(rat,rat)}
>=: (int,int->bool): {>=@(int,int)}
>=: (rat,rat->bool): {>=@(rat,rat)}
#: (string,string->string): {#@(string,string)}
#: (string->int): {#@string}
#: (vec->int): {#@vec}
#: (mat->int,int): {#@mat}
#: (vec,int->vec): {#@(vec,int)}
#: (int,vec->vec): {#@(int,vec)}
#: (vec,vec->vec): {#@(vec,vec)}
#: (LieType->int): {#@LieType}
#: (ParamPol->int): {#@ParamPol}
adapted_basis: (mat->mat,vec): {adapted_basis@mat}
adjoint: (LieType->RootDatum): {adjoint@LieType}
ann_mod: (mat,int->mat): {ann_mod@(mat,int)}
ascii: (int->string): {ascii@int}
ascii: (string->int): {ascii@string}
block: (Param->[Param],int): {block@Param}
block_sizes: (InnerClass->mat): {block_sizes@InnerClass}
Cartan_class: (InnerClass,int->CartanClass): {Cartan_class@(InnerClass,int)}
Cartan_class: (KGBElt->CartanClass): {Cartan_class@KGBElt}
Cartan_class: (RealForm,int->CartanClass): {Cartan_class@(RealForm,int)}
Cartan_info: (CartanClass->(int,int,int),vec,(int,int),(LieType,LieType,LieType)): {Cartan_info@CartanClass}
Cartan_matrix: (LieType->mat): {Cartan_matrix@LieType}
Cartan_matrix: (RootDatum->mat): {Cartan_matrix@RootDatum}
Cartan_matrix_type: (mat->LieType,vec): {Cartan_matrix_type@mat}
Cartan_order: (RealForm->mat): {Cartan_order@RealForm}
Cayley: (int,KGBElt->KGBElt): {Cayley@(int,KGBElt)}
Cayley: (int,Param->Param): {Cayley@(int,Param)}
classify_involution: (mat->int,int,int): {classify_involution@mat}
components_rank: (RealForm->int): {components_rank@RealForm}
coroot_radical: (RootDatum->mat): {coroot_radical@RootDatum}
coroots: (RootDatum->mat): {coroots@RootDatum}
count_Cartans: (RealForm->int): {count_Cartans@RealForm}
cross: (int,KGBElt->KGBElt): {cross@(int,KGBElt)}
cross: (int,Param->Param): {cross@(int,Param)}
deform: (Param->ParamPol): {deform@Param}
derived: (RootDatum->RootDatum,mat): {derived@RootDatum}
diagonalize: (mat->vec,mat,mat): {diagonalize@mat}
diagonal: (vec->mat): {diagonal@vec}
distinguished_involution: (InnerClass->mat): {distinguished_involution@InnerClass}
dominant: (Param->Param): {dominant@Param}
dual_form_names: (InnerClass->[string]): {dual_form_names@InnerClass}
dual: (InnerClass->InnerClass): {dual@InnerClass}
dual_KL: (RealForm,DualRealForm->mat,[vec],vec): {dual_KL@(RealForm,DualRealForm)}
dual_occurrence_matrix: (InnerClass->mat): {dual_occurrence_matrix@InnerClass}
dual_quasisplit_form: (InnerClass->DualRealForm): {dual_quasisplit_form@InnerClass}
dual_real_form: (InnerClass,int->DualRealForm): {dual_real_form@(InnerClass,int)}
dual_real_forms: (CartanClass->[DualRealForm]): {dual_real_forms@CartanClass}
dual: (RootDatum->RootDatum): {dual@RootDatum}
echelon: (mat->mat,[int]): {echelon@mat}
eigen_lattice: (mat,int->mat): {eigen_lattice@(mat,int)}
error: (string->*): {error@string}
fiber_part: (CartanClass,RealForm->[int]): {fiber_part@(CartanClass,RealForm)}
filter_units: (mat,vec->mat,vec): {filter_units@(mat,vec)}
form_names: (InnerClass->[string]): {form_names@InnerClass}
form_number: (RealForm->int): {form_number@RealForm}
full_deform: (Param->ParamPol): {full_deform@Param}
fundamental_coweight: (RootDatum,int->ratvec): {fundamental_coweight@(RootDatum,int)}
fundamental_weight: (RootDatum,int->ratvec): {fundamental_weight@(RootDatum,int)}
id_mat: (int->mat): {id_mat@int}
infinitesimal_character: (Param->ratvec): {infinitesimal_character@Param}
inner_class: (LieType,[ratvec],string->InnerClass): {inner_class@(LieType,[ratvec],string)}
inner_class: (RealForm->InnerClass): {inner_class@RealForm}
inner_class: (RootDatum,mat->InnerClass): {inner_class@(RootDatum,mat)}
inner_class: (RootDatum,string->InnerClass): {inner_class@(RootDatum,string)}
integrality_datum: (RootDatum,ratvec->RootDatum): {integrality_datum@(RootDatum,ratvec)}
integrality_points: (RootDatum,ratvec->[rat]): {integrality_points@(RootDatum,ratvec)}
int_format: (int->string): {int_format@int}
inv_Cayley: (int,KGBElt->KGBElt): {inv_Cayley@(int,KGBElt)}
inv_Cayley: (int,Param->Param): {inv_Cayley@(int,Param)}
invert: (mat->mat,int): {invert@mat}
inv_fact: (mat->vec): {inv_fact@mat}
involution: (CartanClass->mat): {involution@CartanClass}
involution: (KGBElt->mat): {involution@KGBElt}
involution: (LieType,mat,string->mat): {involution@(LieType,mat,string)}
involution: (LieType,string->mat): {involution@(LieType,string)}
is_final: (Param->bool): {is_final@Param}
is_standard: (Param->bool): {is_standard@Param}
is_zero: (Param->bool): {is_zero@Param}
kernel: (mat->mat): {kernel@mat}
KGB: (RealForm,int->KGBElt): {KGB@(RealForm,int)}
KGB_size: (RealForm->int): {KGB_size@RealForm}
KL_block: (Param->[Param],int,mat,[vec],vec,vec,mat): {KL_block@Param}
KL_sum_at_s: (Param->ParamPol): {KL_sum_at_s@Param}
length: (Param->int): {length@Param}
Lie_type: (RootDatum->LieType): {Lie_type@RootDatum}
Lie_type: (string->LieType): {Lie_type@string}
most_split_Cartan: (RealForm->CartanClass): {most_split_Cartan@RealForm}
nr_of_Cartan_classes: (InnerClass->int): {nr_of_Cartan_classes@InnerClass}
nr_of_dual_real_forms: (InnerClass->int): {nr_of_dual_real_forms@InnerClass}
nr_of_real_forms: (InnerClass->int): {nr_of_real_forms@InnerClass}
null: (int,int->mat): {null@(int,int)}
null: (int->vec): {null@int}
null_module: (RealForm->ParamPol): {null_module@RealForm}
occurrence_matrix: (InnerClass->mat): {occurrence_matrix@InnerClass}
orientation_nr: (Param->int): {orientation_nr@Param}
param: (KGBElt,vec,ratvec->Param): {param@(KGBElt,vec,ratvec)}
partial_block: (Param->[Param]): {partial_block@Param}
partial_KL_block: (Param->[Param],mat,[vec],vec,vec,mat): {partial_KL_block@Param}
positive_coroots: (RootDatum->mat): {positive_coroots@RootDatum}
positive_roots: (RootDatum->mat): {positive_roots@RootDatum}
print_blockd: (RealForm,DualRealForm->): {print_blockd@(RealForm,DualRealForm)}
print_block: (Param->): {print_block@Param}
print_block: (RealForm,DualRealForm->): {print_block@(RealForm,DualRealForm)}
print_blockstabilizer: (RealForm,DualRealForm,CartanClass->): {print_blockstabilizer@(RealForm,DualRealForm,CartanClass)}
print_blocku: (RealForm,DualRealForm->): {print_blocku@(RealForm,DualRealForm)}
print_gradings: (CartanClass,RealForm->): {print_gradings@(CartanClass,RealForm)}
print_KGB: (RealForm->): {print_KGB@RealForm}
print_KL_basis: (RealForm,DualRealForm->): {print_KL_basis@(RealForm,DualRealForm)}
print_KL_list: (RealForm,DualRealForm->): {print_KL_list@(RealForm,DualRealForm)}
print_prim_KL: (RealForm,DualRealForm->): {print_prim_KL@(RealForm,DualRealForm)}
print_real_Weyl: (RealForm,CartanClass->): {print_real_Weyl@(RealForm,CartanClass)}
print_strong_real: (CartanClass->): {print_strong_real@CartanClass}
print_W_cells: (RealForm,DualRealForm->): {print_W_cells@(RealForm,DualRealForm)}
print_W_graph: (RealForm,DualRealForm->): {print_W_graph@(RealForm,DualRealForm)}
print_X: (InnerClass->): {print_X@InnerClass}
quasisplit_form: (InnerClass->RealForm): {quasisplit_form@InnerClass}
quotient_basis: (LieType,[ratvec]->mat): {quotient_basis@(LieType,[ratvec])}
rank: (LieType->int): {rank@LieType}
rank: (RootDatum->int): {rank@RootDatum}
raw_KL: (RealForm,DualRealForm->mat,[vec],vec): {raw_KL@(RealForm,DualRealForm)}
real_form: (DualRealForm->RealForm): {real_form@DualRealForm}
real_form: (InnerClass,int->RealForm): {real_form@(InnerClass,int)}
real_form: (KGBElt->RealForm): {real_form@KGBElt}
real_form: (ParamPol->RealForm): {real_form@ParamPol}
real_form: (Param->RealForm): {real_form@Param}
real_forms: (CartanClass->[RealForm]): {real_forms@CartanClass}
reducibility_points: (Param->[rat]): {reducibility_points@Param}
replace_gen: ((mat,vec),mat->mat): {replace_gen@((mat,vec),mat)}
root_coradical: (RootDatum->mat): {root_coradical@RootDatum}
root_datum: (InnerClass->RootDatum): {root_datum@InnerClass}
root_datum: (LieType,mat->RootDatum): {root_datum@(LieType,mat)}
root_datum: (LieType,[ratvec]->RootDatum): {root_datum@(LieType,[ratvec])}
root_datum: ([vec],[vec],int->RootDatum): {root_datum@([vec],[vec],int)}
roots: (RootDatum->mat): {roots@RootDatum}
row_saturate: (mat->mat): {row_saturate@mat}
semisimple_rank: (LieType->int): {semisimple_rank@LieType}
semisimple_rank: (RootDatum->int): {semisimple_rank@RootDatum}
simple_coroots: (RootDatum->mat): {simple_coroots@RootDatum}
simple_roots: (RootDatum->mat): {simple_roots@RootDatum}
simply_connected: (LieType->RootDatum): {simply_connected@LieType}
Smith_basis: (mat->mat): {Smith_basis@mat}
Smith_Cartan: (LieType->mat,vec): {Smith_Cartan@LieType}
Smith: (mat->mat,vec): {Smith@mat}
square_classes: (CartanClass->[[int]]): {square_classes@CartanClass}
status: (int,KGBElt->int): {status@(int,KGBElt)}
str: (LieType->string): {str@LieType}
subspace_normal: ([vec]->[vec],[vec],[vec],[int]): {subspace_normal@[vec]}
torus_bits: (KGBElt->vec): {torus_bits@KGBElt}
torus_factor: (KGBElt->ratvec): {torus_factor@KGBElt}
twisted_involution: (RootDatum,mat->InnerClass,vec): {twisted_involution@(RootDatum,mat)}
twist: (KGBElt->KGBElt): {twist@KGBElt}
