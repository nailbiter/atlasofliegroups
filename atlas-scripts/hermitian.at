<representations.at { for spherical_principal_series }
<kl.at

{ a variable used in this file; set to true for more output from functions }
set hermitian_debug = false

{ set nu=0 in a [Param] or in all terms of a ParamPol }
set make_nu0 ([Param] P)  = [Param]:  for p in P do p*0 od
set make_nu0 (ParamPol P) = ParamPol: 0*P + for w@p in P do (w,p*0) od

{ orientation_number_term(orientation_nr(p),q) =
  s^{[\ell_0(p)-\ell_0(q)]/2} which should be defined and gives 1 or s
}
set orientation_nr_term = (int,Param->Split):
  let err()=
    error("computing orientation number for odd difference of lengths")
  then act=[(->Split)]: [@Split:1,err,@:s,err]
  in (int ori_nr_p,Param q) Split: act[(ori_nr_p-orientation_nr(q))%4]()

{ c_form_std:
  write c-invariant form on standard module in terms of standardrepks,
  as a ParamPol
}
set c_form_std (Param p) = ParamPol:
( if hermitian_debug then prints("computing c-form on standard module: ",p) fi
; full_deform(p)
)

{ c_form_irreducible_long(y) returns a ParamPol of standardrepks
  giving the c-invariant form on irreducible(y)
  formula used: when
    J(y)  =sum_x               (-1)^{ell(x)-ell(y)}P(x,y)(q=1)I(x)
  then
    J(y)_c=sum_x (-1)^{on(x,y)}(-1)^{ell(x)-ell(y)}P(x,y)(q=s)I(x)_c
  where
    P(x,y) is a cumulated KL polynomial
    (-1)^{ell(x)-ell(y)}P(x,y) is given by signed_KL_col(y)[i] with
    indices[i]=x on(x,y)=orientation number given by orientation_nr_term()
    I(x)_c given as combination of standards x' with nu(x')=0 by c_form_std(x)
  algorithm: compute the sum for J(y)_c, using signed_KL_col and c_form_std
}
set c_form_irreducible_long (Param p) = (ParamPol,[(Param,Split,ParamPol)]):
( let P = null_module(real_form(p)), standards = [(Param,Split,ParamPol)]: []
  , ori_nr_p = orientation_nr(p)
  in
  for ev@q in KL_sum_at_s(p)
  do
    let form_on_standard = c_form_std(q)
    ,   factor           = ev*orientation_nr_term(ori_nr_p,q)
    in P +:= factor*form_on_standard; standards #:= (q,factor,form_on_standard)
  od
; (P,standards)
)

set c_form_irreducible (Param p)= ParamPol:
( let ori_nr_p = orientation_nr(p), P = null_module(real_form(p)) in
  for ev@q in KL_sum_at_s(p)
  do P +:= ev*orientation_nr_term(ori_nr_p,q)*full_deform(q) od
; P
)

set print_c_form_irreducible_long (Param p) = void:
( let (f,b) = c_form_irreducible_long(p) in
  for (q,coeff,Q) in b
  do prints("")
  ; prints("standard module: ",q)
  ; prints("coefficient: ",split_format(coeff))
  ; prints("form on standard: ")
  ; pol_format(Q)
  od
; prints(""); prints("c-form on irreducible module:")
; prints(p, " at ",infinitesimal_character(p)); pol_format(f)
)

{ analyse }

{ print only terms with "mixed" coefficient (a+bs), i.e., both a,b\ne 0 }
set mixed (Split w)= bool: let (a,b)=%w in a*b!=0
set analyse (ParamPol P) = void:
( prints("Mixed terms:")
; for w@p in P
  do
    if mixed(w)
    then prints("(",split_format(w),")*",p,", ",infinitesimal_character(p))
    fi
  od
)


{ ---------------------------------------- }

{ commands for converting from c-form to hermitian-form}
{ compute (lambda+rho) restricted to torus T }

{ lambda\in X^*+rho =>
    one can define a parameter with this lambda, as p=param(x,lambda-rho,0)
  then infinitesimal_character(p)=(1+theta)lambda/2
  which is lambda restricted to T-tilde
  apply this with lambda-rho=0, returns (1+theta)rho/2     (on T-tilde)
  apply this with lambda-rho,   return  (1+theta)lambda/2  (on T-tilde)
  then the sum is (1+theta)(lambda+rho)/2 on T
}
set lambda_plus_rho_res_T(KGBElt x,ratvec lambda) = ratvec:
  (1+involution(x))*(lambda+rho(real_form(x)))/2

{ mu(p) is the value of the lowest K-type of p, evaluated at x(p) }
{ formula: < (1+theta_x)(lambda+rho)/2 , torus_factor(x)+rho^\vee > }
set mu(Param p) = rat:
  lambda_plus_rho_res_T(x(p),lambda(p))*
  (torus_factor(x(p))+rho_check(real_form(p)))

set convert_cform_hermitian (ParamPol P)= ParamPol:
  if #P=0 then P { since we cannot select a term for a null polynomial }
  else
    let a_mu = mu(first_param(P))
    in null_module(real_form(P)) +
      for w@p in P do (s^(rat_as_int(mu(p)-a_mu))*w,p) od
  fi

{ ParamPol giving the hermitian form on irreducible p }
set hermitian_form_irreducible(Param p) = ParamPol:
( if hermitian_debug
  then prints("Computing Hermitian form on irreducible: ",p)
  fi
; convert_cform_hermitian(c_form_irreducible(p))
)

{ nice output of hermitian_form_irreducible }
set print_hermitian_form_irreducible(Param p) = void:
  pol_format(hermitian_form_irreducible(p))

{ nice output of Hermitian forms on list of parameters }
set print_hermitian_form_irreducible([Param] P) = void:
  for p in P
  do prints("");prints("Hermitian form on irreducible: ",p)
  ; print_hermitian_form_irreducible(p)
  od

{ check the following property: let
  J(p)=\sum a_i I_i(nu)  (character formula)
  J(P)=\sum w_jI_j (formula for c-form or hermitian-form)
  Then test whether
   \sum a_i I_i[nu=0]=\sum_j w_j[s=1]I_j
}
{ set test_form (ParamPol P,Param p)=
  if evaluate_at_1(P) = make_nu0(character_formula(p)) then
    prints("Passed") else prints("Failed")
  fi
}

{ assuming P is the ParamPol of the Hermitian
  form on an irreducible, is_unitary(P) tests
  if it is unitary: <=> every Split w=a+bs has a=0, or all have b=0
}
set is_unitary(ParamPol P)= bool:
( let OK=true, no_coef_1=true, no_coef_s=true, list= for c in P do c od
  then i=#list
  in
  while OK and (i-:=1)>=0
  do let (x,y)= %list[i]
     in if x=0 then { must have y!=0 } no_coef_s:=false; OK:= no_coef_1
        else no_coef_1:=false; OK:= no_coef_s and y=0
        fi
  od
; OK
)
{ body could be:
  let cs = for c@q in P do c od
  in =for c in cs do +c od  or  =for c in cs do ^c od { all re or all im }
}

{ compute Hermitian form on p, and report if it is unitary }

set is_unitary (Param p) = bool: is_unitary(hermitian_form_irreducible(p))

set test_spherical_unitary(RealForm G,[ratvec] nus)= void:
  for nu in nus do
    prints(nu,", ", is_unitary(spherical_principal_series(G,nu)))
  od

set test_line (Param p) = void:
( let (x,lambda_minus_rho,gamma) = %p
  then points=reducibility_points(p)
  ,   ipoints=integrality_points(root_datum(p),2*nu(p))
  in prints("testing line through ", p)
; prints("reducibility points: ",points)
; prints("integrality points (for 2*nu): ",ipoints)
; if #points=0
  then prints("entire line is irreducible and unitary"
       	     ,if is_final(p*0) then "" else " (nu=0 is not final)" fi)
  else points:=0#points { tack on initial zero }
  ; if not points[#points-1]=1/1 then points:=points#(1/1) fi
  ; for i:#points-1 from 1
    do
      let t=(points[i]+points[i-1])/2
      then q=param(x,lambda_minus_rho,gamma*t)         { mid point interval }
      ,    r=param(x,lambda_minus_rho,gamma*points[i]) { end point interval }
      in prints(nu(p)*t,": ", is_unitary(q))
      ;  prints(nu(p)*points[i],": ", is_unitary(r))
    od
  fi
)
