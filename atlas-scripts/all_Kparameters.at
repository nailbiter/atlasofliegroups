<thetastable.at

{some stuff at the top of this file should be moved elsewhere}

{reduce [Param] by combining equivalent parameters; returns a list of inequivalent parameters}
set reduce([Param] parameters)=[Param]:
if #parameters=0 then [Param]:[] else
monomials(virtual(real_form(parameters[0]),parameters)) fi

{to reduce a list of KParams, convert to list of parameters, reduce, then convert back}
set reduce([KParam] Kparameters)=[KParam]:
let parameters=for kp in Kparameters do parameter(kp) od then
r=reduce(parameters) in
for p in r do Kparameter(p) od

set sum(ratvec v)=rat:sum(numer(v))/denom(v)

{write v as a linear combination of columns of A}
set solve_in_lattice([vec] A, vec v)=vec:solve_vec(mat:A,v)

{A: nxm matrix, columns are a basis of a Z-module V of rank m
 M: nxr matrix, columns span a submodule of V
 returns mxr matrix C, column i gives column i of M as a sum of columns of A
 i.e. A*C=M
}
set submodule_basis(mat A,mat M)=mat:for v in M do solve_in_lattice(A,v) od

{rational matrix [ratvec]:[column_1,...,column_n]}

{convert rational matrix to (mat,[int]):(matrix of numerators,vector of denominators)}
set int_matrix([ratvec] S)=(mat,[int]):
(for i:#S do numer(S[i]) od,for i:#S do denom(S[i]) od)

{multiply integer matrix times rational matrix}
set *(mat M,[ratvec] S)=[ratvec]:
let (T,d)=int_matrix(S) then
A=M*T in for i:#S do numer(A[i])/d[i] od

{transpose of rational matrix}
set ^([ratvec] S)=[ratvec]:
if #S=0 or #S[0]=0 then [ratvec]:[] else for i:#S[0] do for j:#S do S[j][i] od od fi

{multiply rationl matrix times integer matrix}
set *([ratvec] S,mat M)=[ratvec]:^(^M*^S)

set is_integer_matrix([ratvec] S)=bool:all( for v in S do is_integer(v) od)

{all [a_0,...a_{n-1}] with 0\le a_i integral and \sum a_i\le Sum}
set parallelogram(int n, int Sum)=[[int]]:let
rec_fun f([[int]] partial, int n,int Sum)=[[int]]:
if #partial=0 then let start=[[int]]:[] in for i:Sum+1 do start#:=[i] od; f(start,n,Sum)
elif #partial[0]=n then partial else
let rv=[[int]]:[] in
for i:#partial do
  for j:Sum-sum(partial[i])+1 do
  rv#:=j#partial[i] od od;f(rv,n,Sum)  fi
in f([[int]]:[],n,Sum)

{given integer n, [rat]:[c_1,...,c_{n-1}], int Sum
all [int]:a[a_0,...a_{n-1}] with 0\le a_i integral and
\sum_i a_i*c_i\le Sum
application: c_i=<i^th fundamental weight,rho^vee>
}
set parallelogram(int n, [rat] c,int Sum)=[[int]]:
{let ()=prints("parallelogram with ", n, c, Sum) then}
let rec_fun f([[int]] partial, int n,[rat] c,int Sum)=[[int]]:
if #partial=0 then let start=[[int]]:[] in for i:floor(Sum/c[0])+1 do start#:=[i] od; f(start,n,c,Sum)
elif #partial[0]=n then partial else
let rv=[[int]]:[] in
for i:#partial do
  let max=1+floor((Sum- sum(for k:#partial[i] do partial[i][k]*c[k] od))/c[#partial[i]])
  in   for j:max do
  rv#:=partial[i]#j od od;f(rv,n,c,Sum)  fi
in f([[int]]:[],n,c,Sum)

set is_in_one_plus_delta(mat delta,ratvec v)=bool:is_integer(v) and in_lattice(1+delta,ratvec_as_vec(v))

set solve_one_plus_delta(mat delta, ratvec v)=vec:
assert(is_in_one_plus_delta(delta,v),"Not solvable");solve_vec(1+delta,ratvec_as_vec(v))

{basis_lambda_differential_0@KGBElt
returns [v_0,...,v_k], v_i\in X^*,
the characters of H^{theta_x} with differential 0
are \sum a_i v_i with a_i=0,1 (or [] -> [0,...,0])
}
set basis_lambda_differential_0(KGBElt x)=[vec]:
let theta=involution(x) then
zero_vector=vec:null(rank(real_form(x))) {default value} then
K=kernel(1+theta) then
(r,c)=#K in
if c=0 then [vec]:[]  else let
M=submodule_basis(K,1-theta) in
if #M=0 then [vec]:[] else let
(A,v)=adapted_basis(M) then
B=K*A in
{prints("K=",K);
prints("A=",A);
prints("v=",v);
prints ("B=",B);}
let rv=[vec]:[]
 in
 for i:#v do if v[i]=2 then rv#:=B[i] fi od;
rv fi fi

{all 2^k vectors in X^* representing the characters of H^theta with differential 0
 k=# of R^* factors in H
 if H^theta is connected, returns [0,...,0]
}
set all_lambda_differential_0(KGBElt x)=[vec]:
let basis=basis_lambda_differential_0(x) in
if #basis=0 then [null(rank(real_form(x)))] else
let rv=[vec]:[] in
for a in generate_all_binary(#basis) do
 let w=vec:null(rank(real_form(x))) in for i:#a do w+:=a[i]*basis[i] od;rv#:=w od;rv fi

{Given mu\in X^*,
 solve mu=(1+theta_x)*lambda for lambda\in X^*+rho
 recall d\lambda=(1+theta)lambda/2, so mu will be 2*d\lambda
 algorithm:
 lambda=lambda_0+rho with lambda_0\in X^*
 note: (1+theta)rho is in X^*
 mu=(1+theta)*lambda_0+(1+theta)*rho \in X^*
 first check mu is in X^*
 then check mu-(1+theta)rho is in (1+theta)X^*
 then solve mu-(1+theta)rho =(1+theta)lambda_0
 then return lambda=lambda_0+rho
}
set find_lambda(KGBElt x,ratvec mu)=ratvec:
let G=real_form(x) then
theta=involution(x) in
assert(is_integer(mu),"mu is not integral");
assert(in_lattice(1+theta, ratvec_as_vec(mu-(1+theta)*rho(G))),"mu-(1+theta)rho is not in (1+theta)X^*");
let lambda_0=solve_vec(1+theta,ratvec_as_vec(mu-(1+involution(x))*rho(G))) in lambda_0+rho(G)

{mu is (1+theta)lambda/2, need to solve for lambda}
set make_K_parameter(KGBElt x,ratvec mu)=Param:
parameter(x,find_lambda(x,mu),null(rank(real_form(x))))

set make_all_K_parameters(KGBElt x,ratvec mu)=[KParam]:
let p=make_K_parameter(x,mu) in
for v in all_lambda_differential_0(x) do (x(p),lambda(p)+v) od

{all K parameters with same dlambda as p}
set make_all_K_parameters(KParam p)=[KParam]:make_all_K_parameters(x(p), dlambda(p))

{all parameters with given infinitesimal character}
set all_parameters_gamma(RealForm G,ratvec gamma)=[Param]:
let params=[Param]:[] in
for x in KGB(G) do
 let theta=involution(x) in
 let nu=(1-theta)*gamma/2 in
 let mu=(1+theta)*gamma in
 let K_params=make_all_K_parameters(x,mu) in
 for p in K_params do params#:=parameter(x(p),lambda(p),nu) od od ;
 reduce(params)  {keep only 1 from each equivalence class}


{all actual parameters with same dlambda as p, same nu}
set all_parameters(Param p)=[Param]:
for v in all_lambda_differential_0(x(p)) do parameter(x(p),lambda(p)+v,nu(p)) od

{all_dominant_norm_less_than@(InnerClass,ratvec,int):
 note: mu will be 2*d\lambda=(1+theta)lambda
 returns mu dominant such that
1) mu\in X^*
2) <mu,v> = <=N
 Note: default is v=rho_check(G), so condition is
 <d\lambda,2*rho^v>=<mu,rho^vee> = <=N
 in applications: mu is for L, a subgroup of G, and v=rho_check(G)
 algorithm:
 set [lambda_1,...,lambda_{m-1}]=fundamental weights
 set [lambda_m,...,lambda_{n-1}]=lie_compact_radical_hat(G):
  this is a Z-basis of compact part of radical (see center.at)
 [lambda_1,...,lambda_{n-1}] is Z-basis we want
 set [rat]:c =[c_1,...,c_{n-1}] where c_i=<lambda_i,v>
 use parallelogram to find
 all mu=\sum a_i lambda_i such that
 <mu,v>=sum a_i*c_i<=N
3) d\mu restricted to the center is trivial
}
set all_dominant_norm_less_than(InnerClass ic, ratvec v,int N)=[[int]]:
let f=fundamental_weights(ic) then
g=lie_compact_radical_hat(ic) then
basis=f#for w in g do ratvec:w od  then
n=#basis then
c=[rat]:for i:n do basis[i]*v od in
let v=parallelogram(n,c,N) in
let rv=[[int]]:[] in
for w in v do let u=ratvec:null(rank(ic)) in for i:#w do u+:=w[i]*basis[i] od;
if is_integer(u) then rv#:=ratvec_as_vec(u) fi od;rv

{mu will be d\lambda=(1+theta)lambda/2 => 2*mu\in X^*
return all mu dominant satisfying:
1) mu in X^*
2) <mu,rho^vee> <= N
3) mu-(1+theta)rho \in (1+delta)X^* (same as in (1+theta)X^*)
4)
}
set all_dominant_in_image_oneplustheta_norm_less_than(InnerClass ic, mat theta,ratvec v,int N)=[[int]]:
let rv=[[int]]:[] in
for mu in all_dominant_norm_less_than(ic,v,N) do
 if in_lattice(1+theta,mu-(1+theta)*rho(ic)) then rv#:=mu fi od;rv

set all_K_parameters_norm_less_than(KGBElt x, ratvec v,int N)=[KParam]:
let ic=inner_class(x),theta=involution(x) then
mus=all_dominant_in_image_oneplustheta_norm_less_than(ic,theta,v,N) then
rv=[KParam]:[] in
for mu in mus do  rv#:=make_all_K_parameters(x,mu) od;rv

set all_rel_split_theta_stable_parabolics(RealForm G)=[Parabolic]:
let parabolics=theta_stable_parabolics(G) then
rv=[] in for P in parabolics do if is_relatively_split(Levi(P)) then
rv#:=P fi  od;rv
{
set all_K_parameters_norm_less_than(RealForm G, ratvec v,int N)=[KParam]:
let parabolics=all_rel_split_theta_stable_parabolics(G) then
Kparameters=[KParam]:[] in
for L in parabolics do let x_L=KGB(L,KGB_size(L)-1) then
x=embed_KGB(x_L,G) in
Kparameters#:=all_K_parameters_norm_less_than(x,v,N) od;
let rv=null_module(G) in for p in Kparameters do  rv+:=parameter(p) od;
sort_by_K_norm(for q in monomials(rv) do Kparameter(q) od)

set K_parameter_string(KParam p)=
if is_integer(lambda(p)) then
to_string("(x=",number(x(p)),",lambda=",ratvec_as_vec(lambda(p)),")") else
to_string("(x=",number(x(p)),",lambda=", lambda(p),")") fi

set print_K_parameter(KParam p)=void:prints(K_parameter_string(p))


set print_K_parameter(ParamPol P)=void:
for (c,p) in %P do prints(split_as_int(c),"*", K_parameter_string(Kparameter(p))) od

set print_K_parameter_long(KParam p)=void:prints(K_parameter_string(p), " ", K_norm(p))
set print_K_parameter_long(KParamPol P)=void:
for (c,p) in %P do prints(split_as_int(c),"*", K_parameter_string(Kparameter(p)), "  ", K_norm(Kparameter(p))) od


set print_all_K_parameters_norm_less_than(RealForm G, ratvec v,int N)=void:
for p in sort_by_K_norm(all_K_parameters_norm_less_than(G,v,N)) do prints(p, " ", K_norm(p)) od







}