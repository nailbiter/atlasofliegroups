<basic
<det

{ test if an integer is even, or a rational is an integer }
set is_even (int i)    = bool: i%2=0
set is_odd (int i)    = bool: not is_even(i)
set is_integer (rat r) = bool: denom(r)=1
set is_positive (rat r)=bool: r>0
set is_nonnegative (rat r)=bool: r>=0

{ test if a ratvec is in fact a vec (integers)}
set is_integer (ratvec v) = bool: denom(v)=1
set is_positive (ratvec v)=let positive=true in for r in v do positive:=(positive and r>0) od;positive
set is_nonnegative (ratvec v)=let nonnegative=true in for r in v do nonnegative:=(nonnegative and r>=0) od;nonnegative

{ make a rational into an integer if possible }
set rattoint (rat r) = int:
  let (n,d)=%r in if d=1 then n else error("Not an integer") fi

{ make a rational vector into an integer one if possible }
set ratvectovec (ratvec v)= vec:
  let (w,d)=%v in if d=1 then w else error("Not an integer vector") fi

{ define dot product ratvec*ratvec,ratvec*vec,vec*ratvec  moved to basic.rx}
{set *(ratvec v,ratvec w)= rat: let (a,b)=%v then (c,d)=%w in a*c/(b*d)}

{ transform ParamPol into a list of (Split,Param) pairs; previously built-in }
set %(ParamPol P) = [(Split,Param)]: for c@p in P do (c,p) od

{ cases *@(vec,ratvec) and *@(ratvec,vec) are now handled by coercion }

set root_datum(Param p)=RootDatum: root_datum(real_form(p))
set root_datum(ParamPol P)=RootDatum: root_datum(real_form(P))

set is_dominant(RootDatum rd, ratvec v)=bool:is_nonnegative(numer(v)*simple_coroots(rd))
set is_regular(RootDatum rd,ratvec v)= bool:
let w=numer(v)*simple_coroots(rd) in let regular=true in for r in v do regular:=(regular and r!=0) od;regular
set is_strictly_dominant(RootDatum rd, ratvec v)=bool:is_dominant(rd,v) and is_regular(rd,v)

{ test if rartional weight (not necessarily dominant) is regular }
set is_regular(RootDatum rd,ratvec lambda)= bool:
  let regular=true
  in for alpha in positive_coroots(rd) do
       if alpha*lambda=0 then regular:=false fi
     od; regular

set is_regular(RealForm G,ratvec lambda)=is_regular(root_datum(G),lambda)
set is_regular(Param p)=is_regular(real_form(p),infinitesimal_character(p))

set rho(RealForm G)=rho(root_datum(G))
set rhocheck(RootDatum rd)= ratvec: rho(dual(rd))
set rhocheck(RealForm G)  = ratvec: rhocheck(root_datum(G))

{ make rho as a vector of integers if possible }
set intrho (RealForm G) = vec: ratvectovec(rho(G))
set intrho (RootDatum r)= vec: ratvectovec(rho(r))

{ some data defined by a Param p }
set integrality_datum(Param p)= RootDatum:
  integrality_datum(root_datum(p),infinitesimal_character(p))

{ extract x,lambda-rho,lambda,nu from p
  lambda-rho =vec,  lambda= ratvec }
set x(Param p) = KGBElt: let (x,,) =%p in x
set lambdaminusrho(Param p) = vec: let (,lambda,) =%p in lambda
set lambda(Param p) = ratvec: lambdaminusrho(p)+rho(real_form(p))
set nu(Param p) = ratvec: let (,,nu) =%p in nu

{ alternate syntax for param command:
  param(G,3,...) instead of param(KGB(G,3),...)  }
set param(RealForm G,int k, vec lambda,ratvec nu)=param(KGB(G,k),lambda,nu)

{ normparam(G,x,lambda,nu)=param(G,x,lambda-rho(G),nu), so you can enter
  lambda without the rho shift, lambda may have denominator 2}
set normparam (RealForm G,int x,ratvec lambda,ratvec nu)=Param:param(G,x,ratvectovec(lambda-rho(G)),nu)
set normparam (KGBElt x,ratvec lambda,ratvec nu)=Param:param(x,ratvectovec(lambda-rho(real_form(x))),nu)



{ get just the parameters from a block, just a shorcut to: (params,)=block(p) }
set get_block (Param p) = [Param]: let (params,)=block(p) in params


{ replace non-final parameter with [Param p] of final ones
  uses this feature of ParamPol, but ignores any coefficients }
set make_final (Param p)= [Param]: for  c@q in null_module(real_form(p))+p do q od

{ nicer display of Splits }
set prettyPrint (Split w) = string:
  let (a,b)=%w in
  if   b=0 then int_format(a)
  elif a=0 then
       if b=1 then "s" elif b=-1 then "-s" else int_format(b)#"s" fi
  elif b=1 then int_format(a)#"+s"
  elif b=-1 then int_format(a)#"-s"
  elif b<-1 then int_format(a)#int_format(b)#"s"
  else int_format(a)#"+"#int_format(b)#"s"
  fi

{ nice output of ParamPol:
  prettyPrint the coefficients, print terms in order of x }
set prettyPrint (ParamPol P)= void:
for w@p in P
do prints("(",prettyPrint(w),")*",p,", ",infinitesimal_character(p)) od

{ evaluate at s=t for t integer (or rational?): replace w=a+bs with a+bt }
{ would seem to make sense only if t^2=1, so if either t=1 or t=-1 }
set  #(Split w,int t)=let (a,b)=%w in int: a+t*b
set  #(Split w,rat t)=let (a,b)=%w in rat: a+t*b
set  #(ParamPol P,int t)= ParamPol: { with integer coefficiens }
  null_module(real_form(P)) +  for w@q in P do (w#t,q) od

{ evaluate polynomial at split }
set eval(vec v,Split w)= Split:
  let sum=Split:0 in  for i:#v downto 0 do sum:= v[i] + w*sum od; sum

set at_s(vec v)=eval(v,s)

{ evaluate polynomial at integer }
set eval(vec v,int k)= int:
  let sum=0 in  for i:#v downto 0 do sum:= v[i] + k*sum od; sum

set fundamental_Cartan(RealForm G)=CartanClass:Cartan_class(G,0)
set most_split_Cartan(RealForm G)=CartanClass:Cartan_class(G,nr_of_Cartan_classes(G)-1)

{properties of groups}

set fiber_part(RealForm G)=fiber_part(Cartan_class(G,0),G)

set rank(RealForm G)=rank(root_datum(G))

set semisimple_rank(RealForm G)=semisimple_rank(root_datum(G))
set rank(RealForm G)=rank(root_datum(G))

set ss_rank(RootDatum rd)= semisimple_rank(rd)
set ss_rank(RealForm G)= semisimple_rank(G)

set dimension(RealForm G)=n_columns(roots(G))+rank(G)


