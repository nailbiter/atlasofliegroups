<basic.rx

set simple_reflection (RootDatum rd, int s) = mat: { s indexes simple root }
  id_mat(rank(rd))- [simple_roots(rd)[s]] * ^[simple_coroots(rd)[s]]

set reflection (RootDatum rd, int alpha) = mat: { alpha indexes any root! }
  id_mat(rank(rd))- [roots(rd)[alpha]] * ^[coroots(rd)[alpha]]

set involution (InnerClass ic, [int] tw) = mat: { tw is a Weyl word }
( let rd = root_datum(ic), theta = distinguished_involution(ic)
  in for i : #tw downto 0 do theta := simple_reflection(rd,tw[i])*theta od
  ; theta
)

set imaginary_roots (InnerClass ic, [int] tw) = mat:   { tw is a Weyl word }
  imaginary_roots(ic,involution(ic,tw))
set real_roots (InnerClass ic, [int] tw) = mat:        { tw is a Weyl word }
  real_roots(ic,involution(ic,tw))
set imaginary_coroots (InnerClass ic, [int] tw) = mat: { tw is a Weyl word }
  imaginary_coroots(ic,involution(ic,tw))
set real_coroots (InnerClass ic, [int] tw) = mat:      { tw is a Weyl word }
  real_coroots(ic,involution(ic,tw))


