{induction_fix.at AP10/20/2015}
{parabolic induction from real and theta-stable parabolics}
set verbose=false
<K.at {for rho_K}
<parabolics.at
<coherent.at
<synthetic.at {for unnormalized_torus_factor}
<K_norm.at
{also kl.at for character_formula }

{L is a theta-stable Levi factor in G}

{KGB(L) embeds in KGB(G): x_L -> embed_KGB(x_L,G)}
{this is a failed attempt to fix bug in embed_KGB}
set my_embed_KGB(KGBElt x_L,RealForm G)=
let i=0,done=false,theta_L=involution(x_L),utf_L=unnormalized_torus_factor(x_L) in
while i<#KGB(G) and not done do
  let x=KGB(G,i) in
   if involution(x)=theta_L then
{  let ()= prints(i, "  ", involution(x),involution(KGB(G,i))) in }
  if is_conjugate(unnormalized_torus_factor(x),utf_L,theta_L) then done:=true;KGB(G,i) else i:=i+1 fi else i:=i+1 fi od;x_L

{KGB(L) embeds in KGB(G): x_L -> embed_KGB(x_L,G)}
set embed_KGB(KGBElt x_L,RealForm G)=KGBElt:KGB_elt(G,involution(x_L), torus_factor(x_L))

{given KGB element of G, find one for M which maps to it}
set inverse_embed_KGB(KGBElt x_G,RealForm M)=KGBElt:KGB_elt(M,involution(x_G), torus_factor(x_G))

{---------------- various rho-shifts -----------------}

{Given an involution theta, construct a set S of complex roots containing one
positive representative of each quadruple (\pm alpha,\pm theta(alpha))
}

set makeS (mat theta,RootDatum rd)=[[int]]:
   let pr=posroots(rd) in let list=[([int],bool)]: for al in pr do (al,true) od in
   for i:#list do let (al,b)=list[i] in if b then for j:#list do
      let (beta,c)=list[j] in if beta=theta*al  or beta=-theta*al then
      list[j]:=(beta,false) fi od fi od;
      let rv=[[int]]:[] in for (a,b) in list do if b then rv#:=a fi od;rv
set makeS(KGBElt x)=[[int]]:makeS(involution(x),root_datum(x))

{rho_S=1/2 sum of roots in S}
set rho_S(mat theta,RootDatum rd)=ratvec:let rv=null(rank(rd)) in
for alpha in makeS(theta,rd) do rv+:=alpha od;rv/2

set rho_S(KGBElt x)=ratvec:rho_S(involution(x),root_datum(x))

{subset of makeS, those alpha>0 such that theta(alpha)>0}
set makeS_typeCplus(mat theta, RootDatum rd)=[[int]]:
let S_0=makeS(theta,rd) then
S=[[int]]:[] in
for alpha in S_0 do if is_positive_root(rd,alpha) then S#:=alpha fi od;S
set makeS_typeCplus(KGBElt x)=[[int]]:makeS_typeCplus(involution(x),root_datum(x))

set rho_S_typeCplus(mat theta,RootDatum rd)=ratvec:
let rv=null(rank(rd)) in
for alpha in makeS_typeCplus(theta,rd) do rv+:=alpha od;rv/2
set rho_S_typeCplus(KGBElt x)=ratvec:rho_S_typeCplus(involution(x),root_datum(x))

{rho_k(x)=one-half the sum of the positive roots of h in k,
 2rho_k(x) is in X^*(H), but is really only well defined modulo (1-theta)X^*
 complex root contribution: only type C+
}
set rho_k(KGBElt x)=ratvec:rho_ic(x)+rho_S_typeCplus(x)
set rho_s(KGBElt x)=ratvec:rho_in(x)+rho_r(x)+rho_S_typeCplus(x)

{--------------------- real parabolic induction -------------------}

{parameters for real Levi L -> parameters for G
p_L=(x_L,lambda,nu) -> p_G=(embed_KGB(x_L,G),lambda + appropriate rho-shift,nu)
rho-shift is: rho_r(G)-rho_r(L)+(1-theta)(rho_S(G)-rho_S(L))
Then Ind_L^G(I(p_L))=I(p_g)}
set real_induce_standard(Param p_L,RealForm G)=Param:
let L=real_form(x(p_L)) then
x_L=x(p_L) then
x_G=embed_KGB(x_L,G) then
theta=involution(x_G) then
shift=rho_r(x_G)-rho_r(x_L)+(1-theta)*(rho_S(x_G)-rho_S(x_L)) in
parameter(x_G,lambda(p_L)+shift,  nu(p_L))

set real_induce_standard(ParamPol P,RealForm G)=ParamPol:
let rv=null_module(G) in for c@p in P do rv+:=c*real_induce_standard(p,G) od;rv

{write Ind(J) as a sum of standards for G}
{write J(p_L)=sum_i a_i* I_L(p_i)
compute sum_i a_i*real_induce_standard(I_L(p_i))
probably won't use this function much, it is mainly used in induced_irreducible}
set real_induce_irreducible_as_sum_of_standards(Param p_L, RealForm G)=
let cf=character_formula(p_L) in
let rv=null_module(G) in
for coeff@p in cf do rv+:=coeff*real_induce_standard(p,G) od;rv

{write Ind(J) as a sum of irreducibles for G
use composition series to convert induce_irreducible_as_sum_of_irreducibles
then convert to sum of irreducibles using composition_series()}
set real_induce_irreducible(Param p_L, RealForm G)=
let cf=real_induce_irreducible_as_sum_of_standards(p_L,G) in
let rv=null_module(G) in
for coeff@p in cf do rv+:=coeff*composition_series(p) od; rv


{  ----------------------   cuspidal data   -----------------------------}

set cuspidal_data(Param p)=
let p=make_no_Cplus(p) then
x_G=x(p) then
P=real_parabolic(x_G) then
M=Levi(P) then
theta=involution(x_G) then
x_M=inverse_embed_KGB(x_G,M)  in
(P,parameter(x_M,lambda(p)-rho_r(x_G)+rho_r(x_M)-(1-theta)*(rho_S(x_G)-rho_S(x_M)),nu(p)))

{  ----------------------   theta-stable data   -----------------------------}

set theta_stable_data(Param p)=
let p=make_no_Cminus(p) then
x_G=x(p) then
P=theta_stable_parabolic(x_G) then
L=Levi(P) then
theta=involution(x_G) then
x_L=inverse_embed_KGB(x_G,L)  in
(P,parameter(x_L,lambda(p)-rho(real_form(p))+rho_r(x(p))+rho(L)-rho_r(x_L),nu(p)))

{---------------------standardize-----------------------------------------}
{need real parabolic induction to define standardize (uses cuspidal_data)}

set coherent_std_imaginary(W_word w,Param p)=
let (,p_M)=cuspidal_data(p) in
real_induce_standard(coherent_std(w,p_M),real_form(p))

{set coherent_std_imaginary(ratvec lam, Param p)=
let (P,p_M)=cuspidal_data(p) in
let M=Levi(P) in let rd_M=root_datum(M) in
let (lam_new,w)=make_dominant(rd_M,lam) in
if lam_new!=lambda(p) then prints("HERE IS A PROBLEM!!!!!!!") fi;
real_induce_standard(coherent_std(w,p_M),real_form(p))}


{convert a possibly non-standard parameter into a linear combination of standard ones}
{algorithm:
p=(x,lambda,nu)
if <lambda,alpha^vee><0 for some imaginary root alpha (i.e. non-standard)
let i_root_system=imaginary roots for x(p)
find w so that w^{-1}lambda is dominant for imaginary roots
set p_dom=parameter(x,w^{-1}lambda,nu)
and return coherent continuation action (wrt imaginary roots) of w^{-1} on p_dom
this should be w on p_dom, need to fix definition of coherent continuation action
}
set standardize(Param p)=ParamPol:
if is_standard(p) then ParamPol:p else
let p=make_no_Cplus(p) in
let i_root_system=root_datum(simple_imaginary_subsystem(x(p))) then
lambda=lambda(p) then
(lambda_dom,w)=make_dominant(i_root_system,lambda) then
p_dom=parameter(x(p), act(inverse(w),lambda(p)), nu(p)) in
coherent_std_imaginary(w,p_dom) fi

set standardize(ParamPol P)=ParamPol:
let rv=null_module(P) in for c@p in P do rv+:=c*standardize(p) od;rv
{--------------------- theta-stable parabolic induction -------------------}

{parameters for theta stable Levi L -> parameters for G:
infinitesimal character=infinitesimal character(pi_L)+rho(u)
p_L=(x_L,lambda,nu) -> p_G=(embed_KGB(x_L,G),lambda + appropriate rho-shift,nu)
rho-shift is: rho_i(G)-rho_i(L)+rho_complex(G)-rho_complex(L)=rho(G)-rho_r(G)-rho(L)+rho_r(L).
Since q is theta stable rho_r(G)-rho_r(L)=0 so the shift is rho(G)-rho(L)=rho(u)
Then p_G=Ind_L^G(I(p_L))=I(p_g)
might not be standard for G (outside of good range), so apply standardize
}
set theta_induce_standard(Param p_L,RealForm G)=ParamPol:
let L=real_form(x(p_L)) then
x_G=embed_KGB(x(p_L),G) then
shift=rho(G)-rho(L) then
()=if verbose then prints("theta_induce_standard of parameter on L: ", p_L) fi then
()=if verbose then prints("shift (rho_G-rho_L): ", shift) fi then
{p_G=parameter(x_G,lambda(p_L)+rho(G)-rho_r(x_G)-rho(L)+rho_r(x(p_L)), nu(p_L)) then}
p_G=parameter(x_G,lambda(p_L)+shift,nu(p_L)) then
()=if verbose then prints("p_G before standardization:", p_G) fi then
()=if verbose then prints("K_norm(p_G) before standardization:", K_norm(p_G*0)) fi then
p_G_standardized=null_module(G) then
()=if (is_standard(p_G)) then
 p_G_standardized:=(ParamPol:p_G);
 if verbose then prints("p_G is standard: ", p_G, standardize(p_G)) fi
else
 let ()=if verbose then prints("Need to standardize:", p_G) fi in
 p_G_standardized:=standardize(p_G);
 if verbose then
 prints("p_G standardized:", p_G_standardized) fi
{ prints("K_norm(p_G standardized):", K_norm(p_G)} fi
{ prints("K_norms of terms of p_G: ", for q in monomials(p_G) do K_norm(q) od ) fi }
in p_G_standardized

{write theta-stable-Ind(J) as a sum of standards for G}
{write J(p_L)=sum_i a_i* I_L(p_i)
compute sum_i a_i*theta_induce_standard(I_L(p_i))
probably won't use this function much, it is mainly used in theta_induce_irreducible}
set theta_induce_irreducible_as_sum_of_standards(Param p_L, RealForm G)=
let cf=character_formula(p_L) in
let ()=if verbose then
prints("p_L:",p_L);
prints("Character formula for p_L:");
prints(cf) fi in
let rv=null_module(G) in
for coeff@p in cf do
let new=theta_induce_standard(p,G) in
rv+:=coeff*new od;
if verbose then prints("induced as sum of standards:", rv) fi;rv

{write theta-stable-Ind(J) as a sum of irreducibles}
set theta_induce_irreducible(Param p_L, RealForm G)=
let cf=theta_induce_irreducible_as_sum_of_standards(p_L,G) in
let rv=null_module(G) in
for coeff@p in cf do rv+:=coeff*composition_series(p) od;
if verbose then prints("induced as sum of irreducibles: ", rv) fi;rv


{------------------- combined real and theta-stable induction---------------}
{induce_standard(p_L,P,G)=induce_standard( (x_L,lambda_L,nu_L), (S,x), G)
 in the theta-stable case may need to use action of Weyl group
 ** (S,x) is the standard parabolic only if x=x_min(P) (up to W_L)
 otherwise, need to apply coherent continuation (or something...)
 in application to highest_weight_to_K_type (in LKT_aux.at) it appears
 we can arrange before calling induce_standard that this holds
 for now throw an error if this fails
}

set induce_standard(Param p_L,Parabolic P,RealForm G)=ParamPol:
assert(is_parabolic_real(P) or is_parabolic_theta_stable(P),"Induction only defined for real or theta-stable parabolics");
if is_parabolic_real(P) then ParamPol:real_induce_standard(p_L,G)
else
 let L=Levi(P) then
 (S,)=P then
 x_P=x_min(P) then
 x_G=embed_KGB(x(p_L),G) in
 assert((S,x_G)=(S,x_P),"x(p_L) and x(P) don't agree up to W_L");
 theta_induce_standard( p_L,G) fi

set induce_irreducible(Param p_L,Parabolic P,RealForm G)=ParamPol:
assert(is_parabolic_real(P) or is_parabolic_theta_stable(P),"Induction only defined for real or theta-stable parabolics");
if is_parabolic_real(P) then ParamPol:real_induce_irreducible(p_L,G)
else
 let L=Levi(P) then
 (S,)=P then
 x_P=x_min(P) then
 x_G=embed_KGB(x(p_L),G) in
 assert((S,x_G)=(S,x_P),"x(p_L) and x(P) don't agree up to W_L");
 theta_induce_irreducible( p_L,G) fi




set induce_standard(ParamPol pol,Parabolic P,RealForm G)=ParamPol:
let rv=null_module(G) in for c@p in pol do rv+:=c*induce_standard(p,P,G) od;rv