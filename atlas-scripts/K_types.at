<LKT.at       { for sort_by_height }
{also:}
{basic.at      for *@(Param,rat) }
{hermitian.at  for hermitian_form_irreducible }


set sort_by_height (ParamPol P) = [(Split,Param)]:
  sort_by_height(for c@p in P do (c,p) od)

set branch_std (Param p, int bound) = ParamPol:
  let sum=0*p in
  for c@q in ParamPol: p*(rat:0) do sum+:= c*branch(q,bound) od; sum

set branch_std (ParamPol P,int bound) = ParamPol:
  let sum=0*P in for c@p in P*(rat:0) do sum +:= c*branch(p,bound) od; sum

set branch_irr (Param p, int bound) = ParamPol:
  branch_std(character_formula(p),bound)

set branch_irr (ParamPol P,int bound) = ParamPol:
  let sum=0*P in for c@p in P do
 sum +:= c*branch_irr(p,bound) od; sum

set print_K_irr (ParamPol P,KGBElt x,int bound) = void:
  for (mult,q) in sort_by_height(branch_irr(P,bound))
  do prints(split_as_int(mult), "*", LKT_highest_weights(q,x)[0]) od

set print_K_irr (ParamPol P,int bound) = void: { default to x=KGB(G,0) }
  print_K_irr(P,KGB(real_form(P),0),bound)

{ K-types of sum of irreducibles P, up to given bound, sorted by
  height, the output includes multiplicity, highest weight (on the identity
  component of K), dimension and height
}
set print_K_irr_long (ParamPol P,KGBElt x,int bound) = void:
  for (mult,q) in sort_by_height(branch_irr(P,bound))
  do let hw=LKT_highest_weights(q,x)[0] in
    prints(split_as_int(mult), "*", hw, " ", LKT_dimensions(q)[0]
          , "    ", height(q))
  od

set print_K_irr_long (ParamPol P,int bound) = void: { default to x=KGB(G,0) }
  print_K_irr_long(P,KGB(real_form(P),0),bound)

{ these definitions promote Param->ParamPol without relying on coercion }
set print_K_irr (Param p,KGBElt x, int bound) = void:
  print_K_irr(ParamPol:p,x,bound)
set print_K_irr (Param p, int bound) = void:
  print_K_irr(ParamPol:p,bound)
set print_K_irr_long (Param p,KGBElt x, int bound) = void:
  print_K_irr_long(ParamPol:p,x,bound)
set print_K_irr_long (Param p, int bound) = void:
  print_K_irr_long(ParamPol:p,bound)

set print_K_std (ParamPol P,KGBElt x,int bound) = void:
  for (mult,q) in sort_by_height(branch_std(P,bound))
  do let hw=LKT_highest_weights(q,x)[0] in
    prints(split_as_int(mult), "*", hw)
  od

set print_K_std (ParamPol P,int bound) = void: { default to x=KGB(G,0) }
  print_K_std(P,KGB(real_form(P),0),bound)

{ K-types of standard p, up to given bound, sorted by height, the
  output includes multiplicity, highest weight (on the identity component of
  K), dimension and height
}
set print_K_std_long (ParamPol P,KGBElt x,int bound) = void:
( prints("rho_K=", rho_K(x))
; for (mult,q) in sort_by_height(branch_std(P,bound))
  do let hw=LKT_highest_weights(q,x)[0] in
    prints(split_as_int(mult), "*", hw, " ", LKT_dimensions(q)[0]
          ,  "    ", height(q))
  od
)

set print_K_std_long (ParamPol P,int bound) = void: { default to x=KGB(G,0) }
  print_K_std_long(P,KGB(real_form(P),0),bound)

{ these definitions promote Param->ParamPol without relying on coercion }
set print_K_std (Param p,KGBElt x, int bound) = void:
  print_K_std(ParamPol:p,x,bound)
set print_K_std (Param p, int bound) = void:
  print_K_std(ParamPol:p,bound)
set print_K_std_long (Param p,KGBElt x, int bound) = void:
  print_K_std_long(ParamPol:p,x,bound)
set print_K_std_long (Param p, int bound) = void:
  print_K_std_long(ParamPol:p,bound)


{ multiplicity of K-type p_K in standard module p }
set mult_std (Param p_K,Param p) = int:
  split_as_int(branch_std(p,height(p_K))[p_K])

{ multiplicity of K-type p_K in irreducible module p }
set mult_irr (Param p_K,Param p) = int:
  split_as_int(branch_irr(p,height(p_K))[p_K])

set K_signature_irr (Param p,int bound) = (ParamPol,ParamPol):
  let form=hermitian_form_irreducible(p) in
  ( branch_std(integer_part(form),bound) , branch_std(s_part(form),bound) )

set print_K_signature_irr (Param p,KGBElt x,int bound) = void:
( let form=hermitian_form_irreducible(p)
  then P=integer_part(form),Q=s_part(form)
  in
  if =P then prints("Positive part is empty")
  else prints("Positive part:"); print_K_std_long(P,x,bound)
  fi
; if =Q then prints("Negative part is empty")
  else prints("Negative part:");print_K_std_long(Q,x,bound)
  fi
)

set print_K_signature_irr (Param p,int bound) = void:
  print_K_signature_irr(p,KGB(real_form(p),0),bound)

set signed_mult (Param p_K,Param p) = (int,int):
  let (P,Q)=K_signature_irr(p,height(p_K)) in
   ( split_as_int(branch_std(P,height(p_K))[p_K])
   , split_as_int(branch_std(Q,height(p_K))[p_K])
   )
