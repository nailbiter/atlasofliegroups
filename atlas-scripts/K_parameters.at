<sort.at
<Weylgroup_aux.at {make_no_Cminus}

{a KParam is a pair (KGBElt x,ratvec lambda)
 representating a final, non-zero, standard limit module
 lambda\in X^*+rho
 requirements:
 standard: <lambda,alpha^vee>>=0 (alpha imaginary)
 final: <lambda+rho_r,alpha^vee> even (alpha real)
 nonzero: <lambda,alpha^vee>=0 for alpha imaginary-simple => alpha is non-compact
}
:KParam=(KGBElt,ratvec)
:KParamPol=ParamPol   {I don't see a convenient way to define a different type for KParamPol}


set x(KParam p)=let (x,)=p in x
set lambda(KParam p)=let (,lambda)=p in lambda
set root_datum(KParam p)=root_datum(x(p))
set real_form(KParam p)=real_form(x(p))

set dlambda(KParam p)=ratvec:(1+involution(x(p)))*lambda(p)/2
set dlambda(Param p)=ratvec:(1+involution(x(p)))*lambda(p)/2

set Kparameter(Param p)=KParam:
assert(nu(p)=null(#nu(p)),"nu(p) is not zero");(x(p),lambda(p))
set parameter(KParam p)=Param:parameter(x(p),lambda(p),null(rank(root_datum(x(p)))))

{equality of KParams is taken care of by equality of Parameters}
set =(KParam p,KParam q)=bool:parameter(p)=parameter(q)

set make_no_Cminus(KParam p)=KParam:Kparameter(make_no_Cminus(parameter(p)))

{K_norm@(KParam,ratvec) is closely related to height@Param, see down a few lines}
set K_norm(ratvec v)=(KParam->int):(KParam p):
let p=parameter(p) then
mu=(1+involution(x(p)))*lambda(p) then
rv=rat:0 in
for alpha in poscoroots(real_form(p)) do  rv+:=abs(alpha*mu) od;
rat_as_int(rv/2)

set K_norm(ratvec v,KParam p)=K_norm(v)(p)
set K_norm(ratvec v,Param p)=K_norm(v)(Kparameter(p))
{also define K_norm(v) of  (Split,Param)}
set K_norm(ratvec v,Split s,KParam p)=int:K_norm(v)(p)
set K_norm(ratvec v,Split s,Param p)=int:K_norm(v)(Kparameter(p))

{height(Param->int) is defined, indepdent of nu,
 K_norm(Kparam->int) is essentially (height@Param)/2
 precisely: K_norm(KParam kp)=height(parameter(kp))/2
}
set K_norm(KParam p)=int:K_norm(rho_check(real_form(x(p))))(p)
set K_norm(Param p)=K_norm(Kparameter(p))
set K_norm(Split s,KParam p)=int:K_norm(p)

{sort [Param] by K_norm(v)}
set sort_by_K_norm(ratvec v) = ([KParam] -> [KParam]): sort_by( K_norm(v))

{for sorting purposes, need different name: K_norm_alt(v) takes (Split,Param) -> int
 this is an internal function, user shouldn't need to call it
 use K_norm(ratvec v,Split s,Param p) instead
}
set K_norm_alt(ratvec v)=(Split,KParam->int):(Split s,KParam p):K_norm(v)(p)
set sort_KParamPol_by_K_norm(ratvec v) = ([(Split,KParam)] -> [(Split,KParam)]): sort_by(K_norm_alt(v))

set print_by_K_norm(ratvec v)=(KParamPol->void):(KParamPol P):
let result=sort_KParamPol_by_K_norm(v)(for c@p in P do (c,Kparameter(p)) od) in
for (c,p) in result do prints(split_as_int(c),"*",p, " ", K_norm(v)(p)) od

set print_by_K_norm(ratvec v,KParamPol P)=void:print_by_K_norm(v)(P)

{set K_norm(ratvec v)=(ParamPol->int):(ParamPol P):
let rv=int:0 in
for p in monomials(P) do let m=K_norm(v)(Kparameter(p)) in if m>rv then rv:=m fi od;rv
}

{K_norm of P is the max of K_norm(terms)}
set K_norm(ratvec v,KParamPol P)=int:
let rv=int:0 in
for p in monomials(P) do let m=K_norm(v)(Kparameter(p)) in if m>rv then rv:=m fi od;rv

set K_norms(ratvec v,KParamPol P)=[int]:for p in monomials(P) do K_norm(v,p) od
set K_norms(KParamPol P)=[int]:for p in monomials(P) do K_norm(rho_check(real_form(P)),p) od

set leading_terms(ratvec v)=(KParamPol->ParamPol):(KParamPol P):
let max=K_norm(v,P) then
rv=null_module(real_form(P)) in
for c@p in P do if K_norm(v)(Kparameter(p))=max then rv+:=c*p fi od;rv

set all_K_norms(ratvec v)=(KParamPol->[int]):(KParamPol P):
let rv=[int]:[] in
for c@p in P do rv#:=K_norm(v)(Kparameter(p)) od;sort(rv)

{  default versions: v=rho_check }

set sort_by_K_norm = ([KParam] -> [KParam]): sort_by( K_norm@KParam )
set sort_by_K_norm = ([(Split,KParam)] -> [(Split,KParam)]): sort_by(K_norm@(Split,KParam))

set print_by_K_norm(KParamPol P)=void:print_by_K_norm(rho_check(real_form(P)),P)

set K_norm(KParamPol P)=int:K_norm(rho_check(real_form(P)),P)

set leading_terms(KParamPol P)=KParamPol:leading_terms(rho_check(real_form(P)))(P)

set all_K_norms(KParamPol P)=[int]:all_K_norms(rho_check(real_form(P)))(P)

