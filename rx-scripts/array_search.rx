{binary search in sorted arrays, used by W_orbit.rx}

{cutfirst entry from an array}
set cut([int] a)=for i:#a -1 from 1 do a[i] od

{lexicographical order on equal length arrays of integers}
set < = ([int],[int]->bool):
let less ([int] v,[int] w) = true { dummy } in
less:=(([int] v,[int] w):
if (#v != #w) then error("can't compare vectors of unequal length")
elif (v=w) then false
elif v[0]<w[0] then true
elif v[0]>w[0] then false
else less(cut(v),cut(w)) fi)

set > = ([int],[int]->bool):
let greater ([int] v,[int] w) = true { dummy } in
greater:=(([int] v,[int] w):
if (#v != #w) then error("can't compare vectors of unequal length")
elif (v=w) then false
elif v[0]>w[0] then true
elif v[0]<w[0] then false
else greater(cut(v),cut(w)) fi)

{in_list(list,v)=(bool,int):
(true,k): list[k]=v  (0<=k<=#k-1)
(false,0): v<list[0]
(false,k): list[k-1]<v<list[k] (0<=k<=#list-1)
(false,#list): list[#list-1]<v
precondition: list is strictly increasing}
{}
set in_list = ([[int]],[int],int->bool,int):
  let in_list ([[int]] list,[int] v,int loc) = (false,0) { dummy } in
in_list:=(([[int]] list,[int] v,int loc):
if #list=0 then (false,loc)
else
 let k=(#list+1)\2 in
 if (v=list[k-1]) then (true,loc+k-1)
 elif (v<list[k-1]) then in_list(for i:k-1 do list[i] od,v,loc)
 else  in_list(for i:#list-k from k do list[i] od,v,loc+k)  fi
fi)
set in_list([[int]] list,[int] v)=
for i:#list-1 do if not(list[i]<list[i+1]) then error("list is not strictly decreasing") fi od;in_list(list,v,0)

{in_list_reverse(list,v)=(bool,int):
(true,k): list[k]=v  (0<=k<=#k-1)
(false,0): v>list[0]
(false,k): list[k-1]>v>list[k] (0<=k<=#list-1)
(false,#list): list[#list-1]>v
precondition: list is strictly decreasing}
set in_list_reverse = ([[int]],[int],int->bool,int):
  let in_list_reverse ([[int]] list,[int] v,int loc) = (false,0) { dummy } in
in_list_reverse:=(([[int]] list,[int] v,int loc):
if #list=0 then (false,loc)
else
 let k=(#list+1)\2 in
 if (v=list[k-1]) then (true,loc+k-1)
 elif (v>list[k-1]) then in_list_reverse(for i:k-1 do list[i] od,v,loc)
 else  in_list_reverse(for i:#list-k from k do list[i] od,v,loc+k)  fi
fi)

set in_list_reverse([[int]] list,[int] v)=
for i:#list-1 do if not(list[i]>list[i+1]) then error("list is not strictly decreasing") fi od;in_list_reverse(list,v,0)

{insert_at(list,v,k) inserts v into position k of list, no assumptions about order}
set insert_at([[int]] v,[int] w,int k)=[[int]]:(for i:k do v[i] od)#w#(for i:#v-k from k do v[i] od)


