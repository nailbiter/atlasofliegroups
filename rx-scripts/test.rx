<groups.rx
<hermitian.rx
<unitary.rx
<nilpotent.rx
<lietypes.rx
<representations.rx

{ test list [(Param p,bool answer)],
  test p for unitarity and compare result with answer
  prints:
    parameter,
    computed unitarity,
    claimed unitarity,
    number of reducibility points,
    number of deformations
}

set new_test=true

set test([(Param,bool)] parameters)= bool:
  let rf = let (p,)=parameters[0] in real_form(p)
  , rv=true
  then ()=prints("Testing ", #parameters, " parameters for ",rf)
  in
if new_test
then
  for (p,answer)@i in parameters do
    let (c_form,count)=
      let on_p=orientation_nr(p), P = null_module(rf)
      , KL_sum = KL_sum_at_s(p)
      in for ev@q in KL_sum do
      let fd=full_deform(q) in
      let ()=prints(q,": ",#(reducibility_points(q))," ",#fd) in
      P+:= ev*orientation_nr_term(on_p,q)*fd od
      ; (P,#KL_sum)
    then form=convert_cform_hermitian(c_form)
    then unitary=is_unitary(form)
    in
    if unitary !=answer then rv:=false fi
  ; prints(i, ", ",p, ", ", unitary, ", ", answer,
           ", ", #(reducibility_points(p)),", ",count)
  od
; prints("Result: ",if rv then "Passed" else "Failed" fi); rv
else
  for (p,answer)@i in parameters do
    let (c_form,list)=c_form_irreducible_long(p)
    then form=convert_cform_hermitian(c_form)
    then unitary=is_unitary(form)
    in
    if unitary !=answer then rv:=false fi
  ; prints(i, ", ",p, ", ", unitary, ", ", answer,
           ", ", #(reducibility_points(p)),", ", #list)
  od
; prints("Result: ",if rv then "Passed" else "Failed" fi); rv
fi

set test_one(Param param,bool unitary)=test([(param,unitary)])
set test_one_unitary(Param param)=test([(param,true)])

{ prepare parameters, all are supposed to be unitary }
set all_unitary([Param] parameters)= [(Param,bool)]:
  for p in parameters do (p,true) od

{ prepare parameters from |nu| values only }
set spherical_mixed(RealForm G,[(ratvec,bool)] nu_pairs)=  [(Param,bool)]:
  for (nu,ans) in nu_pairs do (spherical_principal_series(G,nu),ans) od

set spherical(RealForm G,[ratvec] nus)= [Param]:
  for nu in nus do spherical_principal_series(G,nu) od

{ for simple types, test spherical representations with nu=1/2 h(O^\vee)
  G should be simple, split, SL(n,R), Sp(2n,R), SO(n,n),SO(n+1,n)
  or simply connected;  see nilpotent_lambdas in nilpotent.rx }
set spherical_unipotent(RealForm G)= [Param]:
( if #Lie_type(root_datum(G))>1 then error("Not a simple group") fi
; spherical(G,nilpotent_lambdas(G))
)

{ a series of tests if increasing length }
{ very fast tests }
set test1()=test(all_unitary(spherical_unipotent(Sp(4,R))))
set test2()=test(all_unitary(spherical_unipotent(split_form(G2))))
set test3()=test(all_unitary(spherical_unipotent(Sp(6,R))))
set test4()=
  let G2=quasisplit_form(inner_class(adjoint("G2"),"e"))
  in test (for p@i in trivial_block(G2) do (p,i<5 or i=9) od)

{ slightly longer, up to a few minutes }
set test5()= test(all_unitary(spherical_unipotent(SO(5,4))))
set test6()= test(for p@i in trivial_block(Sp(4,R)) do (p,i<7 or i=10) od)

{ first 49 of 59 spherical unitary parameters for F4 }
set test7()= bool:
  test(all_unitary(spherical(split_form(F4)
			    ,for i:49 do F4_spherical_unitary[i] od)))

{ first 100 of spherical unitary for E7
  requires more memory}
set test8()= bool:
  test(all_unitary(spherical(split_form(E7)
			    ,for i:100 do E7_spherical_unitary[i] od)))


{ trivial of F4 takes up to two hours }
set test9()=bool:
  let ()=prints("Testing trivial of F4") in is_unitary(trivial(split_form(F4)))
