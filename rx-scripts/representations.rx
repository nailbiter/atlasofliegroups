<misc
<group_operations
{some common representations}

{ finite dimensional with highest weight gamma in X^*
  param(last KGB element,lambda=gamma+rho,nu=gamma+rho)
  consequently every simple root is in the tau-invariant,
  and the infinitesimal character is gamma+rho }
set finite_dimensional(RealForm G,vec gamma) = Param:normparam(KGB(G,KGB_size(G)-1),gamma+rho(G),gamma+rho(G))

{ trivial representation of G, see finite_dimensional }
set trivial(RealForm G) = Param: finite_dimensional(G,null(rank(G)))

set large_fundamental_series(RealForm G)=Param:
if not(is_quasisplit(G)) then error("group is not quasisplit")  else param(G,0,null(rank(G)), null(rank(G)))  fi

set large_discrete_series(RealForm G)=Param:
if not(is_equal_rank(G)) then error("group is not equal rank") else large_fundamental_series(G) fi

{spherical principal series of split group
 assuming G is split}
set spherical_principal_series (RealForm G, ratvec nu)= Param:
  let lambda=null(rank(G)) in param(KGB(G,KGB_size(G)-1),lambda,nu)

{ returns [Param] list of parameters in block of trivial }
set trivial_block(RealForm G) = [Param]: get_block(trivial(G))

set principal_series_by_tau(RealForm G,[int] tau_invariant)=Param:
if not is_split(G) then error("Group must be split") 
elif not is_simply_connected(G) then error("Group must be simply connected") else
let lambda=ratvec:null(rank(G)) in 
let ()=for i in tau_invariant do lambda+:=fundamental_weight(G,i) od in
param(KGB(G,KGB_size(G)-1),ratvectovec(rho(G)+lambda),rho(G)) fi

set principal_series_by_tau_complement(RealForm G,[int] tau_invariant)=Param:
if not is_split(G) then error("Group must be split") 
elif not is_simply_connected(G) then error("Group must be simply connected") else
let lambda=ratvec:null(rank(G)) in 
let ()=for i in tau_invariant do lambda+:=fundamental_weight(G,i) od in
param(KGB(G,KGB_size(G)-1),ratvectovec(lambda),rho(G)) fi




set all_principal_series(RealForm G)=[Param]:
if not is_split(G) then error("Group must be split") 
elif not is_simply_connected(G) then error("Group must be simply connected") else
let rv=[] in 
for tau in generate_all_subsets(for i:ss_rank(G) do i od) do rv#:=principal_series_by_tau(G,tau) od;rv fi
