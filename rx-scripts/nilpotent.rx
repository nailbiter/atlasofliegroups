<basic

set max ([int] p) = int: { for dimensioning vector indexable by entries of p }
  let m=0 { assuming no negative entries } in
  for x in p do if x>m then m:=x fi od; m


{ (complex) nilpotent orbits for simple groups,
  and 1/2 h(O^\vee) for dual nilpotent orbits O^\vee
  classical groups: SL(n), GL(n), Sp(2n), SO(n),
  orbits: partition-type parameterization
  no attempt is made to handle I/II orbits in type D,
  so these are really orbits for O(n,C) not SO(n,C)
  lambda: standard coordinates
  (in type A_n lambda has n+1 coordinates, i.e. for GL(n))
  exceptional groups: simply connected (fundamental weight) coordinates,
  only the lambdas are returned, from tables in Spaltenstein and Carter
}

{ utility to convert type A-G of a simple root system to a number 0-6
  we allow and ignore (trailing) torus factors; pure torus classifies as A }
set get_type(LieType t) = int:
  let code=ascii(str(t)) { first character }, n=#t in
  if code=ascii("T") then 0
  elif n=1 then code-ascii("A")
  elif { not good, but try dropping central torus factors }
    let f=%t then ()= while n>0 and str(f[n-1])="T1" do n -:=1 od  in n=1
  then code-ascii("A")
  else error("Non-simple Lie type")
  fi

{ same as previous applied to a RootDatum, or a RealForm }
set get_type(RootDatum rd) = int: get_type(Lie_type(rd))
set get_type(RealForm G) = int: get_type(root_datum(G))

{ generate all partitions of n,
  each partition is written in decreasing order
  partitions are in lexicographically smallest [1,...,1] to largest [n] order
  each partition of n-1 gives rise to 1 or 2 partitions of n: the first by
  appending a part 1, the second by increasing the final part if possible
}
set partitions =
  let part (int n) = [[int]]:[]
  in part :=
  ((int n):
    let rv=[[int]]:[] in
    if n=1 then rv:=[[1]]
    else
      for p in part(n-1)
      do let l=#p-1 then last=p[l] in
        rv #:= p#1
      ; if l=0 or p[l-1]>last then p[l]:=last+1; rv #:= p fi
      od
    fi
  ; rv)

{ write a partition as a sequence of multiplicities
  including a leading 0 so that rv[i] is the multiplicity of i
  e.g. [4,3,1,1]->[0,2,0,1,1]}
set partition_multiplicities ([int] p)=vec:
( let rv=null(max(p)+1) in
  for k in p do rv[k]:=rv[k]+1 od
; rv[0]:=0  { clear multiplicity of 0 that was possibly set }
; rv
)

{ partitions of n with all rows of parity |parity| having even multiplicity }
set partitions_parity (int n, int parity) =[[int]]:
( let P=partitions(n), rv=[[int]]: [] in
  for p in P do
    let valid=true in
    for m@i in partition_multiplicities(p) { i=0 not needed, but 0%2!=1 }
    do  if i%2=parity and m%2=1 then valid:=false fi
    od
  ; if valid then rv #:=p fi
  od
; rv
)

{ (complex) nilpotent orbits, partition-type classification,
  for simple group of type A-D }
set nilpotent_orbits(LieType t)= [[int]]:
  let s = get_type(t), n=semisimple_rank(t) in { only classsical types left }
  if s=0 then partitions(n+1)
  elif s=1 then partitions_parity(2*n+1,0) { even in type B }
  elif s<4 then partitions_parity(2*n,3-s) { odd if s=2 (C), even if s=3 (D) }
  else error("Exceptional type")
  fi

{ same as previous applied to RootDatum or RealForm (types A-D only)
  (list of partitions only depends on complexification of real group) }
set nilpotent_orbits(RootDatum rd) = [[int]]: nilpotent_orbits(Lie_type(rd))
set nilpotent_orbits(RealForm G)   = [[int]]: nilpotent_orbits(root_datum(G))

{ nilpotent orbits of dual group (types A-D only) }
set dual_nilpotent_orbits(RootDatum rd)=[[int]]: nilpotent_orbits(dual(rd))
set dual_nilpotent_orbits(RealForm G)=[[int]]:
  dual_nilpotent_orbits(root_datum(G))

{ tools for computing h(O^\vee): apply to rows of Young diagram }
set rho (int n)=[rat]: for k:n do (n-1)/2-k od { e.g., [3/2,1/2,-1/2,-3/2] }
set String (int n)=[rat]: for k:n\2 do (n-1)/2-k od { e.g., [4/2,2/2] }

{ compute 1/2 h(O^\vee) for G of type |t| (types A-D only)
  O^\vee assumed to be an orbit of G^\vee, given by a partition |P|
  only complexification (root_datum) of G plays a role }
set nilpotent_lambda(LieType t,[int] P) = ratvec:
  let rv=[rat]:[] in
  if get_type(t)=0
  then for p in P do rv #:= rho(p)    od; rv
  else for k in P do rv #:= String(k) od; rv # for i: sum(P)\2-#rv do 0/1 od
  fi


{ same as previous applied to (RootDatum,[int] P) }
set nilpotent_lambda(RootDatum rd,[int] p) = ratvec:
  nilpotent_lambda(Lie_type(rd),p)

{lists of 1/2 h(O^\vee)}

{ exceptional groups first }
{ nilpotent orbit given by labelled Dynkin diagram
  label c={0,1,2} on node i -> (c/2)*i^th fundamental weight }

set nilpotent_lambdas_G2=[ratvec]:
[[0,0],[0,1]/2,[1,0]/2,[1,0],[1,1]]

{ these are flipped from the table Carter due to the duality }

set nilpotent_lambdas_F4=[ratvec]:
[[0,0,0,0]
,[0,0,0,1]/2
,[1,0,0,0]
,[0,0,1,0]/2
,[1,0,0,0]
,[0,0,0,1]
,[0,1,0,0]/2
,[1,0,0,2]/2
,[0,1,0,1]/2
,[1,0,1,0]/2
,[0,0,1,0]
,[2,1,0,1]/2
,[0,0,1,1]
,[1,0,1,0]
,[1,0,1,1]
,[1,1,1,1]
]

set nilpotent_lambdas_E6=[ratvec]:
[[0,0,0,0,0,0]
,[0,1,0,0,0,0]/2
,[1,0,0,0,0,1]/2
,[0,0,0,1,0,0]/2
,[0,1,0,0,0,0]
,[1,1,0,0,0,1]/2
,[1,0,0,0,0,1]
,[0,0,1,0,1,0]/2
,[1,2,0,0,0,1]/2
,[1,0,0,1,0,1]/2
,[0,1,1,0,1,0]/2
,[0,0,0,1,0,0]
,[1,1,0,0,0,1]
,[0,1,0,1,0,0]
,[1,1,1,0,1,1]/2
,[2,1,1,0,1,2]/2
,[1,2,1,0,1,1]/2
,[1,0,0,1,0,1]
,[1,1,0,1,0,1]
,[1,1,1,0,1,1]
,[1,1,1,1,1,1]
]

set nilpotent_lambdas_E7=[ratvec]:
[[0,0,0,0,0,0,0]
,[1,0,0,0,0,0,0]/2
,[0,0,0,0,0,1,0]/2
,[0,0,0,0,0,0,1]
,[0,0,1,0,0,0,0]/2
,[1,0,0,0,0,0,0]
,[0,1,0,0,0,0,1]/2
,[1,0,0,0,0,1,0]/2
,[0,0,0,1,0,0,0]/2
,[2,0,0,0,0,1,0]/2
,[0,0,0,0,0,1,0]
,[0,1,0,0,0,0,0]
,[1,0,0,0,0,0,1]
,[0,0,1,0,0,1,0]/2
,[1,0,0,1,0,0,0]/2
,[0,0,1,0,0,0,0]
,[1,0,0,0,1,0,1]/2
,[1,0,1,0,0,0,0]
,[0,1,1,0,0,0,1]/2
,[0,0,0,1,0,1,0]/2
,[1,0,0,0,0,1,0]
,[0,0,0,0,1,0,0]
,[1,0,0,0,0,1,1]
,[2,1,1,0,0,0,1]/2
,[1,0,0,1,0,1,0]/2
,[2,0,0,1,0,1,0]/2
,[0,0,0,1,0,0,0]
,[1,0,0,1,0,2,0]/2
,[1,0,0,1,0,1,2]/2
,[1,0,0,0,1,0,0]
,[0,1,1,0,1,0,2]/2
,[0,0,1,0,0,1,0]
,[1,0,1,0,0,1,0]
,[0,0,0,1,0,0,1]
,[0,0,0,1,0,1,0]
,[2,1,1,0,1,1,0]/2
,[2,1,1,0,1,0,2]/2
,[1,0,0,1,0,0,1]
,[2,1,1,0,1,2,2]/2
,[1,0,0,1,0,1,0]
,[1,0,1,1,0,1,0]
,[1,0,0,1,0,1,1]
,[1,1,1,0,1,0,1]
,[1,1,1,0,1,1,1]
,[1,1,1,1,1,1,1]
]

set nilpotent_lambdas_E8=[ratvec]:
[[0,0,0,0,0,0,0,0]
,[0,0,0,0,0,0,0,1]/2
,[1,0,0,0,0,0,0,0]/2
,[0,0,0,0,0,0,1,0]/2
,[0,0,0,0,0,0,0,1]
,[0,1,0,0,0,0,0,0]/2
,[1,0,0,0,0,0,0,1]/2
,[0,0,0,0,0,1,0,0]/2
,[1,0,0,0,0,0,0,2]/2
,[0,0,1,0,0,0,0,0]/2
,[1,0,0,0,0,0,0,0]
,[1,0,0,0,0,0,1,0]/2
,[0,0,0,0,0,1,0,1]/2
,[0,0,0,0,0,0,1,0]
,[0,0,0,0,0,0,1,1]
,[0,0,0,0,1,0,0,0]/2
,[0,0,1,0,0,0,0,1]/2
,[0,1,0,0,0,0,1,0]/2
,[1,0,0,0,0,1,0,0]/2
,[1,0,0,0,0,0,0,1]
,[0,0,0,1,0,0,0,0]/2
,[0,1,0,0,0,0,1,2]/2
,[0,1,0,0,0,0,0,0]
,[1,0,0,0,0,1,0,1]/2
,[1,0,0,0,1,0,0,0]/2
,[1,0,0,0,0,1,0,2]/2
,[0,0,0,1,0,0,0,1]/2
,[0,0,0,0,0,1,0,0]
,[2,0,0,0,0,1,0,1]/2
,[0,0,0,1,0,0,0,2]/2
,[0,0,1,0,0,1,0,0]/2
,[0,1,0,0,0,0,0,1]
,[1,0,0,0,0,0,1,0]
,[1,0,0,0,0,0,1,1]
,[0,0,0,1,0,0,1,0]/2
,[1,0,0,1,0,0,0,1]/2
,[0,0,1,0,0,1,0,1]/2
,[0,1,1,0,0,0,1,0]/2
,[1,0,0,0,1,0,1,0]/2
,[0,0,0,1,0,1,0,0]/2
,[1,0,0,0,1,0,1,2]/2
,[0,0,0,0,1,0,0,0]
,[1,0,0,0,0,1,0,0]
,[0,1,1,0,0,0,1,2]/2
,[1,0,0,1,0,1,0,0]/2
,[0,0,0,1,0,1,0,2]/2
,[1,0,0,0,0,1,0,1]
,[0,0,0,0,1,0,0,1]
,[2,1,1,0,0,0,1,2]/2
,[1,0,0,0,0,1,1,1]
,[1,0,0,1,0,1,0,1]/2
,[1,0,0,1,0,1,1,0]/2
,[1,0,0,1,0,1,0,2]/2
,[2,0,0,1,0,1,0,2]/2
,[0,0,0,1,0,0,0,1]
,[1,0,0,0,1,0,0,1]
,[1,0,0,1,0,1,2,2]/2
,[0,1,1,0,1,0,2,2]/2
,[0,0,0,1,0,0,1,0]
,[2,1,1,0,1,1,0,1]/2
,[0,0,0,1,0,0,1,1]
,[2,1,1,0,1,0,2,2]/2
,[1,0,0,1,0,0,1,0]
,[1,0,0,1,0,0,1,1]
,[2,1,1,0,1,2,2,2]/2
,[1,0,0,1,0,1,0,1]
,[1,0,0,1,0,1,1,1]
,[1,1,1,0,1,0,1,1]
,[1,1,1,0,1,1,1,1]
,[1,1,1,1,1,1,1,1]
]

set nilpotent_lambdas_E(int n)= [ratvec]:
  if   n=6 then nilpotent_lambdas_E6
  elif n=7 then nilpotent_lambdas_E7
  elif n=8 then nilpotent_lambdas_E8
  else error("wrong rank for type E")
  fi

{ list of 1/2 h(O^\vee), for G with root datum rd
  coordinates are:
  G: GL(n), SP(2n), SO(n), standard coordinates
  or simple, exceptional, fundamental weight coordinates }

set nilpotent_lambdas(RootDatum rd)=[ratvec]:
  let lt = Lie_type(rd), r=rank(rd)
  then code=get_type(lt)
  in
  if code<4
  then  for p in dual_nilpotent_orbits(rd) do nilpotent_lambda(lt,p) od
  elif code=6 then nilpotent_lambdas_G2
  elif code=5 then nilpotent_lambdas_F4
  elif code=4 then nilpotent_lambdas_E(r)
  else error("Wrong type")
  fi

{ same as previous for RealForm or, for example, "E8" }
set nilpotent_lambdas(RealForm G)=[ratvec]:
  nilpotent_lambdas(root_datum(G))
