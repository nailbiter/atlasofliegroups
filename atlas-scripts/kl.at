{ KL stuff, including character formulas and composition series
  This implementation seeks to avoid using KL_block, and instead uses
  KL_sum_at_s, as this function stores earlier results
  Also (compared to old implementation) no regular/singular case distinction
}

<polynomial.at { defines types poly, poly_mat }

{
  Basic object: column of KL matrix (P-matrix), of polynomials evaluted as s,
  which by setting s=1 gives formula for irreducible as sum of standards

  main functions:

  character_formula(p): irreducible(p) as sum of standards
  composition_series(p): standard(p) as sum of irreducibles

  signed_KL_mat_at_1(p): signed P-matrix evaluated at 1 (integral matrix)
  KL_inverse_mat_at_1(p): Q-matrix evaluated at 1 (integral matrix)

  also
    print_character_formula,print_composition_series
}

{ ------------------------------------------------------------------- }

set character_formula (Param p) = ParamPol: s_to_1(KL_sum_at_s(p))
set character_formula (ParamPol P)=ParamPol:
let result=null_module(P) in
for c@p in P do result+:=c*character_formula(p) od;result

{ ------------------------------------------------------------------- }

{ composition series }

set composition_series (Param p) = ParamPol:
( let acc = ParamPol: p, result = null_module(p) in
  while !=acc { non null module }
  do let (coef,final):term=last_term(acc) in
    result +:= term; acc -:= coef*character_formula(final)
  od
; result
)

set composition_series(ParamPol P)= ParamPol:
let result=null_module(P) in
for c@p in P do result+:=c*composition_series(p) od;result

set tabulate_at_1 ([Param] block, (Param->ParamPol) f) = mat:
  for y in block { y determines a column of the result }
  do let fy=f(y) in for x in block do s_to_1(fy[x]) od
  od

set signed_KL_mat_at_1(Param p) = mat:
( KL_sum_at_s(p) {dummy call to ensure internal tables are filled }
; tabulate_at_1(partial_block(p), character_formula@Param)
)

set KL_inverse_mat_at_1(Param p) = mat:
( KL_sum_at_s(p) {dummy call to ensure internal tables are filled }
; tabulate_at_1(partial_block(p), composition_series@Param)
)

{ versions that do the whole block rather than a partial block }
set full_signed_KL_mat_at_1(Param p) = mat:
  tabulate_at_1(block_of(p),character_formula@Param)
set full_KL_inverse_mat_at_1(Param p) = mat:
  tabulate_at_1(block_of(p),composition_series@Param)


set print_formatted (ParamPol P) = void:
  for w@p in P do prints(split_format(w),"*",p) od

set print_character_formula (Param p) = void:
  print_formatted(character_formula(p))

set print_composition_series(Param p) = void:
  print_formatted(composition_series(p))
