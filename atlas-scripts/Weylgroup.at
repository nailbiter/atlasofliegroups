<center.at {for lie_radical}

{ Functions for computing with Weyl words }

: W_word = (RootDatum,[int]) { keep a RootDatum at hand for interpretation }

set root_datum (W_word(rd,)) = RootDatum: rd
set word (W_word(,w))        = [int]:  w
set # (W_word(,w))           = int: #w { non reduced length of word }


{ action of Weyl word on X^*\otimes Q}
set act (W_word(rd,w), vec v) = vec:
  let alpha = simple_roots(rd), alphav = simple_coroots(rd) in
  for i:#w downto 0 do let wi=w[i] in v -:= alpha[wi]*(alphav[wi]*v) od; v

set act (W_word ww, ratvec rv) = ratvec:
  let (v,den)=%rv in act(ww,v)/den

{ action of Weyl word on X_*\otimes Q }
set co_act (ratvec rcv, W_word(rd,w)) = ratvec:
  let alpha = simple_roots(rd), alphav = simple_coroots(rd) in
  for wi in w do rcv -:= (rcv*alpha[wi])*alphav[wi] od; rcv

set w_matrix (W_word(rd,w)) = mat:
  let M=id_mat(rank(rd))
  , alpha = simple_roots(rd), alphav = simple_coroots(rd)
  in for s in w do M -:= M*column(alpha[s])*row(alphav[s]) od; M

set equal (W_word w, W_word u) = bool: w_matrix(w)=w_matrix(u)

set inverse (W_word(rd,w)) = W_word: { reverse w component } (rd,w~[:])

set cross(W_word(rd,w),KGBElt x)=KGBElt:cross(w,x)

{		--- using W to make values dominant ---			}

set non_dominant_index (RootDatum rd, vec v) = int:
  let coords = v*simple_coroots(rd), i=semisimple_rank(rd)-1 in
  while >=i and coords[i]>=0 do i-:=1 od; i

{ make_dominant(rd,v)
  returns (v_dom,w) where v_dom dominant and v=act(w,v_dom)
}
set make_dominant (RootDatum rd, vec v) = (vec,W_word):
  let i=0 { needed to pass value across 'do' }
  then w = while >=(i:=non_dominant_index(rd,v)) do v:=reflect(rd,i,v); i od
  in (v,(rd,w))

set make_dominant (RootDatum rd, ratvec v) = (ratvec,W_word):
  let (v,denom)=%v then (v_dom,w)=make_dominant(rd,v) in (v_dom/denom,w)

{ rho(rootDatum rd) is in basic.at; need rho(rd,v) is in an any chamber:}
set rho(RootDatum rd, ratvec v)=let (v_dom,w)=make_dominant(rd,v) in act(w, rho(rd))

set w_long (RootDatum rd) = W_word:
  let (,ww) = make_dominant(rd,-rho(rd)) in ww

{ often one just needs the dominant vector; this can be done more efficiently }
set dominant (RootDatum rd, vec v) = vec:
  let i=0 in while (i:=non_dominant_index(rd,v))>=0 do v:=reflect(rd,i,v) od; v
set dominant (RootDatum rd, ratvec v) = ratvec:
  let (n,d)=%v in dominant(rd,n)/d

{ find some Weyl word (not lexicographically first) acting by the matrix M }
set word (RootDatum rd, mat M) = W_word:
  let (,ww) = make_dominant(rd,M*rho(rd))
  in assert(w_matrix(ww)=M,"Not the action of any Weyl group element"); ww

{ find some Weyl word w so that w*delta acts by the matrix M }
set word (RootDatum rd,mat delta, mat M) = W_word:word(rd,delta*M)

{ rather than length(rd,M) = #word(rd,M), the following is simpler }
set length (RootDatum rd, mat M) = int: { count positive roots made negative: }
  n_columns(columns_with(is_negative_root(rd),M*posroots(rd)))

{ contrary to #@W_word, |length| computes the reduced length }
set length(W_word (rd,):ww) = int: length(rd,w_matrix(ww))

{ whether multiplication by simple reflection lengthens or shortens M }
set lengthens (RootDatum rd, mat M, int s) = bool: { for right multiplication }
  is_positive_root(rd)(M*root(rd,s))
set lengthens (RootDatum rd, int s, mat M) = bool: { for left multiplication }
  is_positive_coroot(rd)(coroot(rd,s)*M)

{ find Weyl group element (W_word) making root simple, and index of simple root
  with result |(ww,i)| one has |root(rd,i) = act(ww,root)|, a simple root
  note: |ww| is in inverse position with respect to what |make_dominant| does
}
set make_simple_sequence (RootDatum rd, vec !root) = (W_word, int):
  let r = semisimple_rank(rd), i=0, val=0, alpha=root, w= [int]: [] in
  while { first find index that will make alpha shorter, which should exist }
    i:=0; while i<r and <=(val:=coroot(rd,i)*alpha) do i+:=1 od
  ; if i=r { nothing found } then error(root," is not a positive root") fi
  ; alpha != root(rd,i) { this is the condition of the outer while! }
  do alpha -:= root(rd,i)*val; w := i#w
  od;
  ((rd,w),i)

{ as |make_simple_sequence|, but return Weyl group element in matrix form }
set make_simple (RootDatum rd, vec root) = (mat, int):
  let (w,i) = make_simple_sequence(rd,root) in (w_matrix(w),i)


{		--- translating to dominant gamma ---			}


{ |gamma| is integrally dominant, need to add a sum of roots to it to make it
  dominant; this does not change the integral Weyl chamber of |gamma|,
  so when acting on parameters it is another parameter with the same types of
  roots, generating an isomorphic block
  this algorithm is crude: it adds a big enough multiple of |2*rho(rd)|
}
set make_dominant_using_roots (RootDatum rd, ratvec gamma) = (ratvec,vec):
  let diff = (2*rho(rd))\1 * { minimal >=scalar making |gamma+diff| dominant: }
    ( let k=0 in
      for alpha_check in simple_coroots(rd)
      do k:=max(k,ceil(-gamma*alpha_check/2)) od
    ; k)
  in (gamma+diff,diff)

set make_dominant_using_roots (RootDatum rd, vec v) = (vec{dom},vec{shift}):
  let (w,shift) = make_dominant_using_roots(rd,v) in (w\1,shift)

{ assume infinitesimal character |gamma| of |p| is integrally dominant
  translate by sum of roots to make it dominant
  return (new parameter, sum of roots)
}
set translate_to_dominant (Param p) = (Param{dom},vec{shift}):
  let (x,lambda_rho,gamma) = %p
  then  (new_gamma,shift) = make_dominant_using_roots(root_datum(p),gamma)
  in (param(x,lambda_rho+shift,new_gamma),shift)

{      ---------- integrally dominant functions -------------		}

{ using integrality datum for given character makes it integrally dominant
  note that the resulting W_word contains the integrality datum, not |rd|
}
set make_integrally_dominant (RootDatum rd,ratvec v) = (ratvec,W_word):
  make_dominant(integrality_datum(rd,v),v)

{ act by Weyl group element w, then make result integrally dominant }
set int_dom_act (W_word(rd,):ww,ratvec v) = ratvec:
  let (new_v,) = make_integrally_dominant(rd,act(ww,v)) in new_v

{------------------------basic group operations---------------------}

set left_mult (int i,W_word(rd,w))  = W_word: (rd, i#w)
set right_mult (int i,W_word(rd,w)) = W_word: (rd, w#i)
set conjugate (int i, W_word(rd,w)) = W_word: (rd, i#w#i)

set multiply (W_word(rd,v), W_word({ assume rd too },w)) = W_word: (rd,v#w)
set * = multiply@(W_word,W_word)

set conjugate (W_word(rd,v), W_word({ assume rd too },w)) = W_word:
   (rd, v#w#v~[:])

{ Some basic functions for when a Weyl word represents a twisted involution }

{ compute involution from twisted involution Weyl word }
set involution (InnerClass ic, W_word({should be rd from ic},w)) = mat:
  let rd = root_datum(ic), theta = distinguished_involution(ic) in
  for s in w { reverse: } ~ do theta := reflection(rd,s)*theta od;
  theta

set imaginary_roots (InnerClass ic, W_word tw) = mat:
  imaginary_roots(ic,involution(ic,tw))
set real_roots (InnerClass ic, W_word tw) = mat:
  real_roots(ic,involution(ic,tw))
set imaginary_coroots (InnerClass ic, W_word tw) = mat:
  imaginary_coroots(ic,involution(ic,tw))
set real_coroots (InnerClass ic, W_word tw) = mat:
  real_coroots(ic,involution(ic,tw))

{  invariants forms on X^* and X_*  }

{matrix of the W-invariant form on X^*\otimes Q
 (gamma,lambda)=\sum <gamma,alpha^v><lambda,alpha^v>
 sum over positive coroots
 the radical of the form is the center
}
set invariant_form(RootDatum rd)=mat:let M=poscoroots(rd) in M*^M
set invariant_form(RootDatum rd, ratvec v, ratvec w)=let M=invariant_form(rd) in v*M*w

set nondegenerate_invariant_form(RootDatum rd, ratvec v,ratvec w)=
let z=lie_radical_part(rd,v) in invariant_form(rd,v,w)+z*z

{W-invariant form on X_*\otimes Q}
set co_invariant_form(RootDatum rd)=mat:let M=posroots(rd) in M*^M
set co_invariant_form(RootDatum rd, ratvec v, ratvec w)=let M=co_invariant_form(rd) in v*M*w

set delete([W_word] W, int k)=[W_word]:W[:k]#W[k+1:]

{ order of W_word, uses order@mat from basic.at }
set order (W_word w) = int: order(w_matrix(w))

