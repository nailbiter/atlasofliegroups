<KL_Q_polynomials.at
{I=standard, J'=irreducible
 Q(J',I)=\sum a_i q^i 
 a_{(l(I)-l(J')-n)/2}=mult of J' in level n F_n of Jantzen filtration
where I=I_0\supset I_1\supset ...
F_0=I_0/I_1 is unique irreducible quotient
F_i=I^i/I_{i+1}
 =>
 a_m = mult of J' in level (length(I)-length(J')-2m) of the Jantzen filtration

Write multiplicity vector as [b_0,b_1,...,b_{r-1}] 
where r=length(I)-length(J') and
where b_i = multiplicity of J' in F_i

So if Q(J',I)=a_0+a_1*q+...+a_kq^k   (k=floor( (l(I)-l(J')-1)/2))
then the multiplicity vector is:

[1]                           if J'=I

[0,a_k,0,a_{k-1},0,...,a_0]   if length(I)-length(J') is odd
[0,0,a_k,0,a_{k-1},0,...,a_0] if length(I)-length(J') is even

Thus [0,a_k,0,a_{k-1},0,...,a_0] means:

multiplicity of J' in F^1 is a_k
multiplicity of J' in F^3 is a_{k-1}
...
multiplicity of J' in F^{1+2r} is a_{k-r}
...
multiplicity of J' in F^{1+2k} is a_0  [note: 1+2k=l(I)-l(J')]

similarly

[0,0,a_k,0,a_{k-1},0,...,a_0] means:

multiplicity of J' in F^2 is a_k
multiplicity of J' in F^4 is a_{k-1}
...
multiplicity of J' in F^{2+2r} is a_{k-r}
...
multiplicity of J' in F^{2+2k} is a_{0}  [note: 2+2k=l(I)-l(J')]
}

set graded_multiplicities([Param] B,poly_mat Q,Param irr, Param std)=vec:
if irr=std then [1] else
let f=KL_Q_polynomial(B,Q,irr,std) then
d=length(std)-length(irr) then
v=null(d+1) in for i:#f do v[d-2*i]:=f[i] od; v  fi

set graded_multiplicities([Param] B,Param irr, Param std)=vec:graded_multiplicities(B,KL_Q_polynomials(B),irr,std)
set graded_multiplicities(Param irr, Param std)=vec:graded_multiplicities(block_of(irr),irr,std)

set graded_composition_series([Param] B,poly_mat Q,Param std)=
let rv=[] in 
for irr in B do 
{let f=KL_Q_polynomial(B,Q,irr,std) in}
let f=graded_multiplicities(B,Q,irr,std) in 
{if f != zero_poly and #f !=0 then }
if sum(f) >0 then
rv#:=(irr,f) fi od ;rv

set graded_composition_series([Param] B,Param std)=graded_composition_series(B,KL_Q_polynomials(B),std)
set graded_composition_series(Param std)=graded_composition_series(block_of(std),std)

set print_graded_composition_series(Param std)=void:
let B=block_of(std) then
Q=KL_Q_polynomials(B) then
()=prints("G=", real_form(std));
prints("graded composition series of standard module:");
prints(std);prints("length=", length(std));
prints("");prints("parameter, length, length-difference, Q(J',I), levels") in
for (p,m) in graded_composition_series(block_of(std),std) do prints(p, " ", length(p), " ", length(std)-length(p), " ", stringPoly(KL_Q_polynomial(B,Q,p,std),"q"), "  ", m) od


