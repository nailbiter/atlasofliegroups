set merge(vec a, vec b) =
  if #a=0 then b
  else let (i,j)=(0,0)
  in b#:=a[#a-1] { sentinel; when this becomes b[j] assures a is then emptied }
  ; while i<#a or j+1<#b
    do if i<#a and a[i]<=b[j] then a[i] next i+:=1 else b[j] next j+:=1 fi
    od
  fi

set mergesort=
  let ms (vec v, int l) = v in
  ms := ((vec v, int l):
    if l<3 then if l<2 or v[0]<=v[1] then v else [v[1],v[0]] fi
    else let h=l\2 then hh=l-h
         then a=ms(for i:h do v[i] od,h), b=ms(for i:hh from h do v[i] od,hh)
         in merge(a,b)
    fi
  )

set inv_standardisation =
  let merge([(int,int)] a, [(int,int)] b) =
    if #a=0 then b
    else let (i,j)=(0,0)
    in b#:=a[#a-1] { sentinel }
    ; while i<#a or j+1<#b
      do
        if i=#a then b[j] next j+:=1
        else let (x,):ai=a[i], (y,):bj=b[j] in
          if x<=y then ai next i+:=1 else bj next j+:=1 fi
	fi
      od
    fi
  , ms ([(int,int)] v, int l) = v
  then ()= ms:=
  ( ([(int,int)] v, int l):
    if l>=3
    then let h=l\2 then hh=l-h in
      merge(ms(for i:h do v[i] od,h),ms(for i:hh from h do v[i] od,hh))
    elif l<2 then v
    else { l=2 }
      let (x,):v0=v[0], (y,):v1=v[1] in if x<=y then v else [v1,v0] fi
    fi)
  in (vec v) vec:
    for (,org_i) in ms(for a@i in v do (a,i) od,#v) do org_i od

set sort_by ((Param->int) f) = ([Param] v) [Param]:
  for index in inv_standardisation(for x in v do f(x) od) do v[index] od

