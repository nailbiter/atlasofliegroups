{parabolics.at 10/21/15}
<kgp.at
<Weylgroup_aux.at

{complex parabolics and Levi factors
 parabolics with theta-stable Levi factor
 theta-stable parabolics
 real parabolics
}

{ComplexParabolic data type: G-conjugacy class of parabolic subgroups of complex group
(RootDatum rd,[int] S) <-> G-conjugacy class of standard pararbolic with Levi factor given by
subset S of simple roots
}

:ComplexParabolic=(RootDatum,[int])

set complex_parabolic([int] S,KGBElt x)=ComplexParabolic:(root_datum(x),S)

{complex Levi factor}
set complex_Levi (RootDatum rd, (int->bool) select) = RootDatum:
root_datum(columns_with(select,simple_roots(rd))
            ,columns_with(select,simple_coroots(rd)))
set complex_Levi (RootDatum rd,[int] S) = complex_Levi (rd,is_member(S))

{-------------------------moved from kgp.at-------------------------}

{see kgp.at, a K-conjugacy class of parabolics is given by the Parbolic data type ([int] S,KGBElt x) }

{test if Levi defined by set of simple roots S is theta_x stable
algorithm: H=sum of fundamental co-weights not in S
<theta_x(alpha),H>=0 for all alpha in S
}
set is_Levi_theta_stable(Parabolic P)=bool:
let (S,x)=P then
G=real_form(x) then
T=complement(semisimple_rank(G),S) then
theta=involution(x) then
H=ratvec:null(rank(G)) then
sr=simple_roots(G) then
fcw=fundamental_coweights(G) then
()=for i in T do H+:=fcw[i] od in
all(for i in S do theta*sr[i]*H=0 od)

{make a real Levi factor from P=(S,x), the complex Levi of S must be theta_x-stable}
set Levi(Parabolic P)=RealForm:
assert(is_Levi_theta_stable(P),"Levi factor is not theta-stable");
let eq=equivalence_class_of(P) then
x_min=eq[0] then
(S,x)=P then
complex_Levi=complex_Levi(real_form(x),S) then
ic_Levi=inner_class(complex_Levi,involution(x_min)) in
real_form(ic_Levi,involution(x_min),torus_factor(x_min))

{test if parabolic P=(S,x) is theta-stable: <=>
1) L is theta-stable
2) y is closed
3) alpha simple, not in S => alpha is imaginary or C+ wrt maximal(P)
}
set is_parabolic_theta_stable(Parabolic P)=bool:
let x_max=maximal(P),S=S(P) in
is_Levi_theta_stable(P) and
is_closed(P) and
all( for j in complement(semisimple_rank(real_form(x_max)),S) do
let s=status(j,x_max) in s=1 or s=3 or s=4 od )

{test if parabolic P=(S,x) is real: <=>:
1) L is theta-stable
2) y is open
3) alpha simple, not in S => alpha is real or C- wrt a minimal element of P
}
set is_parabolic_real(Parabolic P)=bool:
let (S,x)=P then
x_max=maximal(P) in
is_Levi_theta_stable(P) and
is_open(P) and
all( for j in complement(semisimple_rank(real_form(x_max)),S) do
let s=status(j,x_max) in s=0 or s=2 od )

{------------  unipotent radical of P ------------------}
{see K.pdf, Section 4
P=(S,x)
if x=x_0:=KGB(G,0) then P is the standard parabolic P_S with simple roots S,
and nilrad(P) is contained in the basic Borel
in general P=(S,x) -> gP_Sg^{-1} where gxg^{-1}=x_0
if the G-orbit of P is closed, equivalently L contains the fundamental Cartan,
we can replace x with x=x_min(P) which is on the fundamental Cartan
and then find w so that w*x=x_0
}


set rho_u(Parabolic P)=ratvec:rho(real_form(P)) - rho(Levi(P))
set rho_l(Parabolic P)=ratvec:rho(Levi(P))

set nilrad(Parabolic P)=[vec]:
let rho_u=rho_u(P) then
rv=[vec]:[] in
for alpha in poscoroots(root_datum(P)) do if alpha*rho_u>0 then rv#:=alpha fi od;rv

{--------------------alternative method---------------}
{it is convenient to be able to define a parabolic in terms of a semisimple element
either in \h or \h^*
}

{by default: lambda is in \h^*}
set zero_simple_coroots(RootDatum rd, ratvec lambda)=[int]:
let rv=[int]:[] then
scr=simple_coroots(rd) in
for i:semisimple_rank(rd) do if lambda*scr[i]=0 then rv#:=i  fi od;rv

set parabolic(ratvec lambda,KGBElt x)=Parabolic:
let rd=root_datum(x) then
(lambda_dom,w)=make_dominant(rd,lambda) in Parabolic:(zero_simple_coroots(rd,lambda_dom), cross(inverse(w),x))

set Levi(ratvec lambda,KGBElt x)=Levi(parabolic(lambda,x))
set nilrad(ratvec lambda,KGBElt x)=[vec]:nilrad(parabolic(lambda,x))
set rho_u(ratvec lambda,KGBElt x)=let roots=nilrad(lambda,x) in if #roots=0 then null(rank(real_form(x))) else ratvec:sum(roots)/2 fi
set rho_Levi(ratvec lambda,KGBElt x)=ratvec:rho(Levi(lambda,x))

{alternatively, X is in \h}
set zero_simple_roots(RootDatum rd, ratvec lambda)=[int]:
let rv=[int]:[] then
sr=simple_roots(rd) in
for i:semisimple_rank(rd) do if lambda*sr[i]=0 then rv#:=i  fi od;rv

set parabolic_alt(ratvec H,KGBElt x)=Parabolic:
let rd=root_datum(x) then
(H_dom,w)=make_dominant(rd,H) in Parabolic:(zero_simple_roots(rd,H_dom), cross(inverse(w),x))

set Levi_alt(ratvec H,KGBElt x)=Levi(parabolic(H,x))
set nilrad_alt(ratvec H,KGBElt x)=[vec]:nilrad(parabolic(H,x))
set rho_u_alt(ratvec H,KGBElt x)=let roots=nilrad(H,x) in if #roots=0 then null(rank(real_form(x))) else ratvec:sum(roots)/2 fi
set rho_Levi_alt(ratvec H,KGBElt x)=ratvec:rho(Levi(H,x))



{----------------------(real) cuspidal parabolics-------------------}

{real_parabolic(x) has Levi factor M=centralizer(A)
u=positive roots not in M
for this to be stable: no C+ roots
=> real roots alpha are those satisfying <(1-theta_x)rho,\alpha^\vee>=0
}
set real_parabolic(KGBElt x)=assert(no_Cplus_roots(x),"x has some C+ roots");parabolic((1-involution(x))*rho(root_datum(x)),x)

{----------------------theta-stable split parabolics-------------------}

{theta_stable_parabolic(x) has Levi factor L=centralizer(T)
u=positive roots not in M
for this to be stable: no C- roots
=> imaginary roots alpha are those satisfying <(1+theta_x)rho,\alpha^\vee>=0
}
set theta_stable_parabolic(KGBElt x)=assert(no_Cminus_roots(x),"x has some C- roots");parabolic((1+involution(x))*rho(root_datum(x)),x)

{-------------------moved from group_operations.at-----------------------}

{other ways of constructing parabolics, maybe these aren't so useful any more}
{comment them out for now}

{ ------------------Levi factor of real parabolic----------- }

{ M=centralizer of A in H=TA, as a RealForm (cuspidal parabolic) }
set real_Levi(KGBElt x) = RealForm:
  let theta = involution(x)
  then ic_M = inner_class(root_datum(simple_from_positive(imaginary_sys(x))),theta)
  in real_form(ic_M,theta,torus_factor(x))

{  (begin comment)
{ Levi factors of general real parabolic }

{ Real Levi defined by set of root indices for its simple system, and x }
set real_Levi_from_simple(
    RealForm G,[int] simpleroot_numbers,KGBElt x,bool show) =  RealForm:
  let theta = involution(x), rd=RootDatum: G
  then roots = rank(rd) # for i in simpleroot_numbers do root(rd,i) od
  , coroots  = rank(rd) # for i in simpleroot_numbers do coroot(rd,i) od
  then new_rd = root_datum(
       	      	  if show then print(roots,coroots) else (roots,coroots) fi)
  in real_form(inner_class(new_rd,theta),theta,torus_factor(x))

set real_Levi_from_simple(RealForm G,[int] inx,KGBElt x) = RealForm:
  real_Levi_from_simple(G,inx,x,false)

{ Real Levi defined by set of root indices for its positive system, and x }
set real_Levi_from_positive(
  RealForm G,[int] posroot_numbers,KGBElt x, bool show) = RealForm:
  let theta = involution(x), rd=RootDatum: G
  then roots = rank(rd) # for i in posroot_numbers do root(rd,i) od
  , coroots  = rank(rd) # for i in posroot_numbers do coroot(rd,i) od
  then new_rd = root_datum(simple_from_positive(
              	  if show then print(roots,coroots) else (roots,coroots) fi))
  in real_form(inner_class(new_rd,theta),theta,torus_factor(x))

set real_Levi_from_positive(RealForm G,[int] inx,KGBElt x) = RealForm:
  real_Levi_from_positive(G,inx,x,false)

{ M=centralizer of (1-theta_x)v }
set real_Levi (KGBElt x,ratvec v) = RealForm:
  let theta=involution(x) then w=(1-theta)*v, rd=RootDatum:real_form(x)
  then poscoroots = columns_with( (vec alphav): =alphav*w, poscoroots(rd))
  then posroots = rank(rd) # for alphav in poscoroots do root(rd,alphav) od
  then rd_M=root_datum(simple_from_positive(posroots,poscoroots))
  in real_form(inner_class(rd_M,theta),theta,torus_factor(x))

set theta_stable_Levi (KGBElt x) = RealForm:
  let ic_L=inner_class(root_datum(simple_from_positive(real_sys(x)))
		      ,involution(x)) in quasisplit_form(ic_L)
{
set M = real_Levi@KGBElt { synonym }
set L = theta_stable_Levi@KGBElt { synonym }
}
(end comment  ---}

{ -------------- auxiliary routines------------------}

{list of K-conjugacy classes of given ComplexParabolic}
set KGP(RealForm G,ComplexParabolic (rd,S))=[KGPElt]:for x in maximal_in_partial_order(G,S) do KGPElt:(S,x) od
set parabolics(RealForm G,ComplexParabolic (rd,S))=[Parabolic]:for x in maximal_in_partial_order(G,S) do Parabolic:(S,x) od

set theta_stable_parabolics(RealForm G,ComplexParabolic P)=[Parabolic]:
let rv=[Parabolic]:[] in  for Q in parabolics(G,P) do if is_parabolic_theta_stable(Q) then rv#:=Q fi od;rv

set theta_stable_parabolics(RealForm G)=[Parabolic]:
let n=semisimple_rank(G) then
all=generate_all_subsets(for i:n do i od) then
rv=[Parabolic]:[] in
for S in all do rv#:=theta_stable_parabolics(G,(G,S))  od;rv


set theta_stable_parabolics_type(RealForm G,[int] P)=[Parabolic]:
let rv=[Parabolic]:[] in
for (Q,y) in theta_stable_parabolics(G) do if Q=P then rv#:=(Q,y) fi od;rv


set print_theta_stable_parabolics(RealForm G)=void:
let all= theta_stable_parabolics(G) in
for P in all do
let (S,x)=P then
L=Levi(P) in
prints("S=", S, " L= ", L, "  x=",x)
od;prints("Total: ",#all)

